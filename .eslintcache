[{"/Users/mngos/Documents/MNgoChat3Web/src/index.js":"1","/Users/mngos/Documents/MNgoChat3Web/src/App.js":"2","/Users/mngos/Documents/MNgoChat3Web/src/Routes.js":"3","/Users/mngos/Documents/MNgoChat3Web/src/pages/NotFound.js":"4","/Users/mngos/Documents/MNgoChat3Web/src/redux/store.js":"5","/Users/mngos/Documents/MNgoChat3Web/src/redux/reducers/rootReducer.js":"6","/Users/mngos/Documents/MNgoChat3Web/src/pages/Landing.js":"7","/Users/mngos/Documents/MNgoChat3Web/src/components/LoadingAnimation.js":"8","/Users/mngos/Documents/MNgoChat3Web/src/utils.js":"9","/Users/mngos/Documents/MNgoChat3Web/src/constants.js":"10","/Users/mngos/Documents/MNgoChat3Web/src/redux/actions/index.js":"11","/Users/mngos/Documents/MNgoChat3Web/src/apis.js":"12","/Users/mngos/Documents/MNgoChat3Web/src/components/PurpleGradientContainer.js":"13","/Users/mngos/Documents/MNgoChat3Web/src/components/GreyGradientContainer.js":"14","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBarWrapper.js":"15","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBar.js":"16","/Users/mngos/Documents/MNgoChat3Web/src/pages/Login.js":"17","/Users/mngos/Documents/MNgoChat3Web/src/pages/Home.js":"18","/Users/mngos/Documents/MNgoChat3Web/src/components/ActionButton.js":"19","/Users/mngos/Documents/MNgoChat3Web/src/components/SignInUpButton.js":"20","/Users/mngos/Documents/MNgoChat3Web/src/components/LandingPageDesign.js":"21","/Users/mngos/Documents/MNgoChat3Web/src/pages/Register.js":"22","/Users/mngos/Documents/MNgoChat3Web/src/components/VerifyPasscode.js":"23","/Users/mngos/Documents/MNgoChat3Web/src/components/HomePageContent.js":"24","/Users/mngos/Documents/MNgoChat3Web/src/firebaseQueries.js":"25","/Users/mngos/Documents/MNgoChat3Web/src/pages/Chat.js":"26","/Users/mngos/Documents/MNgoChat3Web/src/components/ChatPageContent.js":"27","/Users/mngos/Documents/MNgoChat3Web/src/pages/NewChat.js":"28","/Users/mngos/Documents/MNgoChat3Web/src/dayjs.js":"29","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageViewer.js":"30","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageWithLoader.js":"31","/Users/mngos/Documents/MNgoChat3Web/src/components/OfflineModal.js":"32","/Users/mngos/Documents/MNgoChat3Web/src/components/MessageItem.js":"33","/Users/mngos/Documents/MNgoChat3Web/src/FirebaseConfig.js":"34","/Users/mngos/Documents/MNgoChat3Web/src/encryptionConstants.js":"35"},{"size":176,"mtime":1612775371953,"results":"36","hashOfConfig":"37"},{"size":395,"mtime":1612775371949,"results":"38","hashOfConfig":"37"},{"size":932,"mtime":1612775371949,"results":"39","hashOfConfig":"37"},{"size":127,"mtime":1612775371954,"results":"40","hashOfConfig":"37"},{"size":229,"mtime":1612775371955,"results":"41","hashOfConfig":"37"},{"size":11700,"mtime":1612775371955,"results":"42","hashOfConfig":"37"},{"size":1092,"mtime":1612775371954,"results":"43","hashOfConfig":"37"},{"size":494,"mtime":1612775371951,"results":"44","hashOfConfig":"37"},{"size":3887,"mtime":1612794107455,"results":"45","hashOfConfig":"37"},{"size":1862,"mtime":1612775371951,"results":"46","hashOfConfig":"37"},{"size":8617,"mtime":1612775371954,"results":"47","hashOfConfig":"37"},{"size":1623,"mtime":1612775371950,"results":"48","hashOfConfig":"37"},{"size":575,"mtime":1612775371951,"results":"49","hashOfConfig":"37"},{"size":625,"mtime":1612775371950,"results":"50","hashOfConfig":"37"},{"size":4261,"mtime":1612775371951,"results":"51","hashOfConfig":"37"},{"size":577,"mtime":1612775371951,"results":"52","hashOfConfig":"37"},{"size":3916,"mtime":1612775371954,"results":"53","hashOfConfig":"37"},{"size":1838,"mtime":1612775371953,"results":"54","hashOfConfig":"37"},{"size":1008,"mtime":1612775371950,"results":"55","hashOfConfig":"37"},{"size":447,"mtime":1612775371951,"results":"56","hashOfConfig":"37"},{"size":1333,"mtime":1612775371950,"results":"57","hashOfConfig":"37"},{"size":6120,"mtime":1612775371954,"results":"58","hashOfConfig":"37"},{"size":1737,"mtime":1612775371951,"results":"59","hashOfConfig":"37"},{"size":8409,"mtime":1612775371950,"results":"60","hashOfConfig":"37"},{"size":14547,"mtime":1612789827742,"results":"61","hashOfConfig":"37"},{"size":1843,"mtime":1612775371953,"results":"62","hashOfConfig":"37"},{"size":14543,"mtime":1612793624602,"results":"63","hashOfConfig":"37"},{"size":4509,"mtime":1612775371954,"results":"64","hashOfConfig":"37"},{"size":96,"mtime":1612775371952,"results":"65","hashOfConfig":"37"},{"size":692,"mtime":1612775371950,"results":"66","hashOfConfig":"37"},{"size":553,"mtime":1612775371950,"results":"67","hashOfConfig":"37"},{"size":400,"mtime":1612775371951,"results":"68","hashOfConfig":"37"},{"size":2908,"mtime":1612793028754,"results":"69","hashOfConfig":"37"},{"size":539,"mtime":1612788553029,"results":"70","hashOfConfig":"37"},{"size":48,"mtime":1612788461531,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1v2xoz5",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":4,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mngos/Documents/MNgoChat3Web/src/index.js",[],["159","160"],"/Users/mngos/Documents/MNgoChat3Web/src/App.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/Routes.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/NotFound.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/store.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/reducers/rootReducer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Landing.js",["161"],"import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport LandingPageDesign from \"../components/LandingPageDesign\";\n\nimport { checkLoginStatusAction } from \"../redux/actions/index\";\n\nfunction Landing({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    dispatch,\n}) {\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (isSomeoneLoggedIn) {\n                return <Redirect to=\"/home\" />;\n            } else {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Landing);","/Users/mngos/Documents/MNgoChat3Web/src/components/LoadingAnimation.js",["162"],"import React from \"react\";\nimport cx from \"classnames\";\n\nimport loaderImg from '../images/loader.gif';\n\nexport default function LoadingAnimation({\n    dark,\n    loading,\n    className,\n    loaderClassName,\n}) {\n    return loading ? (\n        <center className={className}>\n            <img\n                alt=\"loading\"\n                className={cx(\"loadingAnimation\", { [\"darkLoader\"]: dark }, loaderClassName)}\n                src={loaderImg}\n            />\n        </center>\n    ) : null;\n}","/Users/mngos/Documents/MNgoChat3Web/src/utils.js",["163","164"],"import { enc, AES } from \"crypto-js\";\nimport Cookies from \"universal-cookie\";\n\nimport { ENCRYPTION_KEY } from \"./encryptionConstants\";\nimport { COOKIE_EXPIRATION_TIME, LOGGED_USER_TOKEN_COOKIE_NAME } from \"./constants\";\nconst cookies = new Cookies();\n\n//function to get cookie value\nexport function getCookieValue(cookie_name) {\n    let value = null;\n    try {\n        const cookieValue = cookies.get(cookie_name);\n        if (cookieValue) {\n            value = cookieValue;\n        }\n    } catch {\n        value = null;\n    }\n\n    return value;\n};\n\n//function to set cookie \nexport function makeCookie(key, value) {\n    try {\n        cookies.set(key, value, { path: \"/\", expires: COOKIE_EXPIRATION_TIME, });\n\n        return true;\n    } catch {\n        return false;\n    }\n};\n\nexport function encryptText(text) {\n    try {\n        const encryptedValue = AES.encrypt(text, ENCRYPTION_KEY).toString();\n        return encryptedValue;\n    } catch {\n        return null;\n    }\n}\n\nexport function decryptText(enryptedValue) {\n    let value = null;\n    try {\n        const decrypted = AES.decrypt(enryptedValue, ENCRYPTION_KEY);\n        value = enc.Utf8.stringify(decrypted);\n    } catch {\n        return null;\n    }\n\n    return value;\n}\n\n//function to validate name, contact no and email\nexport function validateUsername(name) {\n    var re = /^[a-zA-Z0-9_]*$/;\n    return re.test(name);\n};\n\nexport function validateName(name) {\n    var re = /^[a-zA-Z0-9 ]*$/;\n    return re.test(name);\n};\n\nexport function validateEmail(email) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n};\n\nexport function validateNumber(number) {\n    var re = /^[0-9]*$/;\n    return re.test(number);\n};\n\nexport function getLoggedUserToken() {\n    return getCookieValue(LOGGED_USER_TOKEN_COOKIE_NAME);\n}\n\nexport function getUserTokenOfTheSecondUser(members) {\n    if (!members) {\n        return null\n    }\n    let userTokenOfSecondUser = null;\n\n    const loggedUserToken = getLoggedUserToken();\n    if (Object.keys(members).length === 2) {\n        try {\n            for (const userToken in members) {\n                if (userToken !== loggedUserToken) {\n                    userTokenOfSecondUser = userToken;\n                    break;\n                }\n            }\n        } catch { }\n    }\n\n    return userTokenOfSecondUser;\n}\n\nexport function getUsernameOfTheSecondUser(members) {\n    if (!members) {\n        return null\n    }\n    let usernameOfSecondUser = null;\n\n    const loggedUserToken = getLoggedUserToken();\n    if (Object.keys(members).length === 2) {\n        try {\n            for (const userToken in members) {\n                if (userToken !== loggedUserToken) {\n                    usernameOfSecondUser = members[userToken].name;\n                    break;\n                }\n            }\n        } catch { }\n    }\n\n    return usernameOfSecondUser;\n}\n\nexport function isEmpty(obj) {\n\n    // null and undefined are \"empty\"\n    if (obj == null) return true;\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length > 0) return false;\n    if (obj.length === 0) return true;\n\n    // If it isn't an object at this point\n    // it is empty, but it can't be anything *but* empty\n    // Is it empty?  Depends on your application.\n    if (typeof obj !== \"object\") return true;\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE < 9\n    for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n}\n\n//function to logout\nexport async function logout() {\n    await cookies.remove(LOGGED_USER_TOKEN_COOKIE_NAME, { path: \"/\", expires: COOKIE_EXPIRATION_TIME });\n};","/Users/mngos/Documents/MNgoChat3Web/src/constants.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/actions/index.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/apis.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/PurpleGradientContainer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/GreyGradientContainer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBarWrapper.js",["165"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport SnackBar from \"./SnackBar\";\nimport OfflineModal from \"./OfflineModal\";\n\nfunction SnackBarWrapper({\n    snackBarCount,\n    snackBarMsg,\n    snackBarType,\n\n    checkLoginStatusError,\n    loginUserError,\n\n    isUserRegistered,\n    registerUserError,\n\n    verifyPasscodeError,\n    getUserAllChatsError,\n    getAllUsersError,\n    getChatRoomDetailsError,\n    startNewChatRoomError,\n    uploadImageError,\n\n    children,\n}) {\n    const [showOfflineWarning, setShowOffLineWarning] = useState(false);\n    const [snackBarVisible, setSnackBarVisible] = useState(false);\n    const [snackBarMsgState, setSnackBarMsgState] = useState(\"\");\n    const [snackBarTypeState, setSnackBarTypeState] = useState(\"success\")\n\n    useEffect(() => {\n        window.addEventListener('offline', function(e) {\n            setShowOffLineWarning(true);\n        });\n\n        window.addEventListener('online', function(e) {\n            setShowOffLineWarning(false);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (snackBarMsg) {\n            makeSnackBar(snackBarMsg, snackBarType);\n        }\n    }, [snackBarCount]);\n\n    useEffect(() => {\n        if (checkLoginStatusError) {\n            makeSnackBar(checkLoginStatusError);\n        }\n    }, [checkLoginStatusError]);\n\n    useEffect(() => {\n        if (loginUserError) {\n            makeSnackBar(loginUserError);\n        }\n    }, [loginUserError]);\n\n    useEffect(() => {\n        if (registerUserError) {\n            makeSnackBar(registerUserError);\n        }\n    }, [registerUserError]);\n\n    useEffect(() => {\n        if (isUserRegistered) {\n            makeSnackBar(\"Successfully registered. Please login to continue\", \"success\");\n        }\n    }, [isUserRegistered]);\n\n    useEffect(() => {\n        if (verifyPasscodeError) {\n            makeSnackBar(verifyPasscodeError);\n        }\n    }, [verifyPasscodeError]);\n\n    useEffect(() => {\n        if (getUserAllChatsError) {\n            makeSnackBar(getUserAllChatsError);\n        }\n    }, [getUserAllChatsError]);\n\n    useEffect(() => {\n        if (getUserAllChatsError) {\n            makeSnackBar(getUserAllChatsError);\n        }\n    }, [getUserAllChatsError]);\n\n    useEffect(() => {\n        if (getAllUsersError) {\n            makeSnackBar(getAllUsersError);\n        }\n    }, [getAllUsersError]);\n\n    useEffect(() => {\n        if (getChatRoomDetailsError) {\n            makeSnackBar(getChatRoomDetailsError);\n        }\n    }, [getChatRoomDetailsError]);\n\n    useEffect(() => {\n        if (startNewChatRoomError) {\n            makeSnackBar(startNewChatRoomError);\n        }\n    }, [startNewChatRoomError]);\n\n    useEffect(() => {\n        if (uploadImageError) {\n            makeSnackBar(uploadImageError);\n        }\n    }, [uploadImageError]);\n\n    function makeSnackBar(msg, type) {\n        setSnackBarMsgState(msg);\n        setSnackBarTypeState(type);\n        setSnackBarVisible(true);\n    }\n\n    function handleSnackBarClose() {\n        setSnackBarVisible(false);\n    }\n\n    return (\n        <>\n            {\n                showOfflineWarning ?\n                    <OfflineModal />\n                    : null\n            }\n            {children}\n            <SnackBar\n                open={snackBarVisible}\n                msg={snackBarMsgState}\n                type={snackBarTypeState}\n                handleClose={handleSnackBarClose}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        snackBarCount: state.snackBarCount,\n        snackBarMsg: state.snackBarMsg,\n        snackBarType: state.snackBarType,\n\n        checkLoginStatusError: state.checkLoginStatusError,\n        loginUserError: state.loginUserError,\n\n        isUserRegistered: state.isUserRegistered,\n        registerUserError: state.registerUserError,\n\n        verifyPasscodeError: state.verifyPasscodeError,\n        getUserAllChatsError: state.getUserAllChatsError,\n        getAllUsersError: state.getAllUsersError,\n        getChatRoomDetailsError: state.getChatRoomDetailsError,\n        startNewChatRoomError: state.startNewChatRoomError,\n        uploadImageError: state.uploadImageError,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(SnackBarWrapper);","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBar.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Login.js",["166"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport logoImg from \"../images/logo.png\";\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport ActionButton from \"../components/ActionButton\";\nimport SignInUpButton from \"../components/SignInUpButton\";\n\nimport { PROJECT_NAME } from \"../constants\";\nimport {\n    showSnackBarAction,\n    checkLoginStatusAction,\n    loginUserAction\n} from \"../redux/actions/index\";\n\nfunction Login({\n    isLoggingUser,\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    history,\n    dispatch,\n}) {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    function handleLoginBtnClick(e) {\n        e.preventDefault();\n\n        if (isLoggingUser) {\n            return;\n        }\n\n        if (username !== \"\" && password !== \"\") {\n            dispatch(loginUserAction(username, password));\n        } else {\n            dispatch(showSnackBarAction(\"Please fill all the input fields\"));\n        }\n    }\n\n    function handleSignUpBtnClick() {\n        history.push(\"/register\");\n    }\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (isSomeoneLoggedIn) {\n                return <Redirect to=\"/home\" />;\n            } else {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            {\n                isCheckingLoginStatus ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                        <img\n                            className=\"logoImg\"\n                            alt=\"logoImg\"\n                            src={logoImg}\n                        />\n                        <div className=\"logoTitle\">{PROJECT_NAME}</div>\n\n                        <form className=\"formContainer\" onSubmit={handleLoginBtnClick}>\n                            <input\n                                type=\"text\"\n                                className=\"formInputField\"\n                                placeholder=\"Username\"\n                                autoFocus\n                                value={username}\n                                onChange={(e) => setUsername(e.target.value)}\n                            />\n\n                            <input\n                                type=\"password\"\n                                className=\"formInputField\"\n                                placeholder=\"Password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n\n                            <ActionButton\n                                dark={false}\n                                showLoader={isLoggingUser}\n                                buttonText=\"Login\"\n                                onClick={handleLoginBtnClick}\n                            />\n                        </form>\n\n                        <SignInUpButton\n                            otherText=\"Don't have an account yet?\"\n                            buttonText=\"Signup\"\n                            onClick={handleSignUpBtnClick}\n                        />\n                    </PurpleGradientContainer>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoggingUser: state.isLoggingUser,\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Login);","/Users/mngos/Documents/MNgoChat3Web/src/pages/Home.js",["167"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport VerifyPasscode from \"../components/VerifyPasscode\";\nimport HomePageContent from \"../components/HomePageContent\";\n\nimport { checkLoginStatusAction } from \"../redux/actions/index\";\n\nfunction Home({\n    isPasscodeVerified,\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    history,\n    dispatch,\n}) {\n    isPasscodeVerified = true;\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (!isSomeoneLoggedIn) {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            {\n                isCheckingLoginStatus || !isSomeoneLoggedIn ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                        {\n                            isPasscodeVerified ?\n                                <HomePageContent history={history} />\n                                :\n                                <VerifyPasscode />\n                        }\n                    </PurpleGradientContainer>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isPasscodeVerified: state.isPasscodeVerified,\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Home);","/Users/mngos/Documents/MNgoChat3Web/src/components/ActionButton.js",["168","169"],"import React from 'react';\nimport cx from \"classnames\";\n\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nexport default function ActionButton({\n    dark,\n    className,\n    textclassName,\n    showLoader,\n    buttonText = \"Button\",\n    onClick,\n}) {\n    return (\n        <button\n            className={cx(\n                \"actionBtnContainer\",\n                { [\"darkActionBtnContainer\"]: dark },\n                className\n            )}\n            onClick={!showLoader ? onClick : null}\n        >\n            {\n                showLoader ?\n                    <LoadingAnimation dark={!dark} loading={showLoader} />\n                    :\n                    <div\n                        className={cx(\n                            \"actionBtnText\",\n                            { [\"darkActionBtnText\"]: dark },\n                            textclassName\n                        )}\n                    >\n                        {buttonText}\n                    </div>\n            }\n        </button>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/SignInUpButton.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/LandingPageDesign.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Register.js",["170"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport logoImg from \"../images/logo.png\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport ActionButton from \"../components/ActionButton\";\n\nimport { PROJECT_NAME } from \"../constants\";\nimport {\n    validateUsername,\n    validateName,\n    validateEmail,\n    validateNumber,\n} from \"../utils\";\nimport { showSnackBarAction, registerUserAction } from \"../redux/actions/index\";\n\nfunction Register({\n    isRegisteringUser,\n    isUserRegistered,\n    dispatch,\n}) {\n    const [username, setUsername] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confPassword, setConfPassword] = useState(\"\");\n    const [passcode, setPasscode] = useState(\"\");\n    const [confPasscode, setConfPasscode] = useState(\"\");\n\n    const [redirectToLoginPage, setRedirectToLoginPage] = useState(false);\n    const [btnClicked, setBtnClicked] = useState(false);\n\n    useEffect(() => {\n        if (isUserRegistered && btnClicked) {\n            setRedirectToLoginPage(true);\n        }\n    }, [isUserRegistered]);\n\n    function handleRegisterBtnClick(e) {\n        e.preventDefault();\n\n        if (isRegisteringUser) {\n            return;\n        }\n\n        if (username !== \"\" && name !== \"\" && email !== \"\" && password !== \"\" && confPassword !== \"\" && passcode !== \"\" && confPasscode !== \"\") {\n            if (!validateUsername(username)) {\n                dispatch(showSnackBarAction(\"Username cannot contain symbol and spaces\"));\n                return;\n            }\n            if (!validateName(name)) {\n                dispatch(showSnackBarAction(\"Name cannot contain symbol and spaces\"));\n                return;\n            }\n            if (!validateEmail(email)) {\n                dispatch(showSnackBarAction(\"Invalid Email id format\"));\n                return;\n            }\n            if (password !== confPassword) {\n                dispatch(showSnackBarAction(\"Password do not match\"));\n                return;\n            }\n            if (!validateNumber(passcode)) {\n                dispatch(showSnackBarAction(\"Passcode must be a number\"));\n                return;\n            }\n            if (passcode.length !== 4) {\n                dispatch(showSnackBarAction(\"Passcode must be 4 digits long\"));\n                return;\n            }\n            if (passcode !== confPasscode) {\n                dispatch(showSnackBarAction(\"Passcode do not match\"));\n                return;\n            }\n\n            setBtnClicked(true);\n            dispatch(registerUserAction(username, name, email, password, passcode));\n        } else {\n            dispatch(showSnackBarAction(\"Please fill all the input fields\"));\n        }\n    }\n\n    return (\n        <>\n            {redirectToLoginPage ? <Redirect to=\"/login\" /> : null}\n\n            <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                <img\n                    className=\"logoImg\"\n                    alt=\"logoImg\"\n                    src={logoImg}\n                />\n                <div className=\"logoTitle\">{PROJECT_NAME}</div>\n\n                <form className=\"formContainer\" onSubmit={handleRegisterBtnClick}>\n                    <input\n                        type=\"text\"\n                        className=\"formInputField\"\n                        placeholder=\"Username\"\n                        autoFocus\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n\n                    <input\n                        type=\"text\"\n                        className=\"formInputField\"\n                        placeholder=\"Name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n\n                    <input\n                        type=\"email\"\n                        className=\"formInputField\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Confirm Password\"\n                        value={confPassword}\n                        onChange={(e) => setConfPassword(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Passcode\"\n                        value={passcode}\n                        maxLength={4}\n                        onChange={(e) => setPasscode(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Confirm Passcode\"\n                        value={confPasscode}\n                        maxLength={4}\n                        onChange={(e) => setConfPasscode(e.target.value)}\n                    />\n\n                    <ActionButton\n                        dark={false}\n                        showLoader={isRegisteringUser}\n                        buttonText=\"Register\"\n                        onClick={handleRegisterBtnClick}\n                    />\n                </form>\n            </PurpleGradientContainer>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isRegisteringUser: state.isRegisteringUser,\n        isUserRegistered: state.isUserRegistered,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Register);","/Users/mngos/Documents/MNgoChat3Web/src/components/VerifyPasscode.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/HomePageContent.js",["171","172","173","174","175","176","177","178","179","180","181"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport cx from \"classnames\";\n\nimport userIcon from \"../images/user.png\";\nimport allChats from \"../images/allChats.png\";\nimport allUsersIcon from \"../images/allUsers.png\";\nimport logoutIcon from \"../images/logout.png\";\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nimport { BOTTOM_NAV_HEIGHT, BOTTOM_NAV_BOTTOM_MARGIN } from \"../constants\";\nimport { logout } from \"../utils\";\nimport { checkLoginStatusAction } from \"../redux/actions/index\";\nimport {\n    setUserActiveStatus,\n    getUserChatRooms,\n    getAllUsers,\n    removeGetUserChatRoomsFirebaseQuery,\n} from \"../firebaseQueries\";\n\nconst CHATS_TITLE = \"Chats\";\nconst USERS_TITLE = \"Users\";\n\nfunction HomePageContent({\n    isGettingUserAllChats,\n    isGettingAllUsers,\n    allUsers = {},\n    userAllChats = {},\n    userDetails: {\n        username: loggedUsername\n    } = {},\n    history,\n    dispatch,\n}) {\n    const [title, setTitle] = useState(CHATS_TITLE);\n\n    useEffect(() => {\n        getUserChatRooms(dispatch);\n        getAllUsers(dispatch);\n        setUserActiveStatus(true);\n\n        const setActiveStatusInterval = setInterval(function() {\n            setUserActiveStatus(true);\n        }, 10000); //setting user lastActive time every 10 seconds\n        //other users need to compare their local time with that user lastActiveTime to get his active status\n\n        return () => {\n            removeGetUserChatRoomsFirebaseQuery();\n            clearInterval(setActiveStatusInterval);\n        }\n    }, []);\n\n    function hanldeNavBtnClick(type) {\n        if (type === CHATS_TITLE) {\n            setTitle(CHATS_TITLE)\n        } else {\n            setTitle(USERS_TITLE)\n        }\n    }\n\n    function handleUserItemClick(data) {\n        if (!data) return;\n\n        if (title === CHATS_TITLE) {\n            history.push(\"chat/\" + data); //data = chatRoomId\n        } else {\n            const selectedUsername = data.username;\n            const selectedUserToken = data.userToken;\n            if (selectedUsername && selectedUserToken) {\n                try {\n                    for (const chatRoomId in userAllChats) {\n                        const userChatRoom = userAllChats[chatRoomId];\n                        const secondUserToken = userChatRoom.secondUserToken;\n\n                        //if that user is already present in all-chats of loggedUser\n                        //then redirecting him to the chat page of that chatRoomId\n                        if (selectedUserToken === secondUserToken) {\n                            history.push(\"chat/\" + chatRoomId);\n                            return;\n                        }\n                    }\n\n                    // if that user is not present in all-chats of loggedUser\n                    // then redirecting him to the new-chat page for that secondUserToken (other userToken)\n                    const selectedUserDetails = { name: selectedUsername, token: selectedUserToken };\n                    history.push(\"new-chat/\" + JSON.stringify(selectedUserDetails));\n                } catch { }\n            }\n        }\n    }\n\n    async function handleLogoutBtnClick() {\n        await logout();\n        dispatch(checkLoginStatusAction());\n    }\n\n    function renderAllChats() {\n        // unread msg chatRooms will be listed first\n        const toRender = Object.keys(userAllChats).map(function(chatRoomId) {\n            const userChat = userAllChats[chatRoomId];\n            const unSeenMsgCount = parseInt(userChat.unSeenMsgCount) || 0;\n            const displayName = userChat.displayName;\n\n            if (unSeenMsgCount === 0) return;\n            if (!displayName) return;\n            return (\n                <div\n                    key={chatRoomId}\n                    className={cx(\"listUserItem\", { [\"unSeenMsgUser\"]: unSeenMsgCount > 0 })}\n                    onClick={() => handleUserItemClick(chatRoomId, title)}\n                >\n                    <img alt=\"userIcon\" src={userIcon} />\n                    {displayName}\n                </div>\n            )\n        });\n\n        toRender.push(Object.keys(userAllChats).map(function(chatRoomId) {\n            const userChat = userAllChats[chatRoomId];\n            const unSeenMsgCount = parseInt(userChat.unSeenMsgCount) || 0;\n            const displayName = userChat.displayName;\n\n            if (unSeenMsgCount !== 0) return;\n            if (!displayName) return;\n            return (\n                <div\n                    key={chatRoomId}\n                    className={cx(\"listUserItem\", { [\"unSeenMsgUser\"]: unSeenMsgCount > 0 })}\n                    onClick={() => handleUserItemClick(chatRoomId)}\n                >\n                    <img alt=\"userIcon\" src={userIcon} />\n                    {displayName}\n                </div>\n            )\n        }));\n\n        return toRender;\n    }\n\n    return (\n        <div className=\"homeContainer\">\n            <div\n                className=\"homeContentContainer\"\n                style={{\n                    \"--bottomNavHeight\": BOTTOM_NAV_HEIGHT,\n                    \"--bottomNavMarginBottom\": BOTTOM_NAV_BOTTOM_MARGIN,\n                }}\n            >\n                <div className=\"homeTitle\">\n                    <div className=\"darkTitle\">{title}</div>\n                    <img alt=\"logoutIcon\" src={logoutIcon} onClick={handleLogoutBtnClick} />\n                </div>\n                <div className=\"homeContent\">\n                    {\n                        isGettingUserAllChats || isGettingAllUsers ?\n                            <LoadingAnimation dark loading />\n                            :\n                            <div>\n                                {\n                                    title === CHATS_TITLE ?\n                                        renderAllChats()\n                                        :\n                                        Object.keys(allUsers).map(function(userToken) {\n                                            const user = allUsers[userToken];\n                                            const displayName = user.username;\n\n                                            if (!displayName) return;\n                                            if (displayName !== loggedUsername) {\n                                                return (\n                                                    <div\n                                                        key={userToken}\n                                                        className=\"listUserItem\"\n                                                        onClick={() => handleUserItemClick(user)}\n                                                    >\n                                                        <img alt=\"userIcon\" src={userIcon} />\n                                                        {displayName}\n                                                    </div>\n                                                )\n                                            }\n                                        })\n                                }\n                            </div>\n                    }\n                </div>\n            </div>\n\n            <div\n                className=\"homeBottomNavContainer\"\n                style={{\n                    \"--bottomNavHeight\": BOTTOM_NAV_HEIGHT,\n                    \"--bottomNavMarginBottom\": BOTTOM_NAV_BOTTOM_MARGIN,\n                }}\n            >\n                <img\n                    className={cx(\"bottomTabIcons\", { [\"selectedBottomTabIcon\"]: title === CHATS_TITLE })}\n                    alt=\"allChats\"\n                    src={allChats}\n                    onClick={() => hanldeNavBtnClick(CHATS_TITLE)}\n                />\n\n                <img\n                    className={cx(\"bottomTabIcons\", { [\"selectedBottomTabIcon\"]: title === USERS_TITLE })}\n                    alt=\"allUsers\"\n                    src={allUsersIcon}\n                    onClick={() => hanldeNavBtnClick(USERS_TITLE)}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGettingUserAllChats: state.isGettingUserAllChats,\n        isGettingAllUsers: state.isGettingAllUsers,\n        allUsers: state.allUsers,\n        userAllChats: state.userAllChats,\n        userDetails: state.userDetails,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(HomePageContent);","/Users/mngos/Documents/MNgoChat3Web/src/firebaseQueries.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Chat.js",["182","183"],"import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport ChatPageContent from \"../components/ChatPageContent\";\n\nimport {\n    checkLoginStatusAction,\n    getChatRoomDetailsAction\n} from \"../redux/actions/index\";\n\nfunction Chat({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    isGettingChatRoomDetails,\n    isChatRoomDetailsFetched,\n    match: {\n        params: {\n            chatRoomId,\n        } = {}\n    } = {},\n    dispatch,\n}) {\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    //to get chat room details\n    useEffect(() => {\n        if (isSomeoneLoggedIn) {\n            dispatch(getChatRoomDetailsAction(chatRoomId));\n        }\n    }, [isSomeoneLoggedIn]);\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (!isSomeoneLoggedIn) {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            {\n                isCheckingLoginStatus || (isGettingChatRoomDetails || !isChatRoomDetailsFetched) ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus || isGettingChatRoomDetails} />\n                    :\n                    <ChatPageContent dispatch={dispatch} chatRoomId={chatRoomId} />\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n        isGettingChatRoomDetails: state.isGettingChatRoomDetails,\n        isChatRoomDetailsFetched: state.isChatRoomDetailsFetched,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Chat);","/Users/mngos/Documents/MNgoChat3Web/src/components/ChatPageContent.js",["184","185","186","187"],"import React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\n\nimport closeIcon from \"../images/close.png\";\nimport userIcon from \"../images/user.png\";\nimport sendIcon from \"../images/send2.png\";\nimport uploadImgIcon from \"../images/uploadImg.png\";\nimport PurpleGradientContainer from \"./PurpleGradientContainer\";\nimport LoadingAnimation from \"./LoadingAnimation\";\nimport ImageViewer from \"./ImageViewer\";\nimport ImageWithLoader from \"./ImageWithLoader\";\nimport MessageItem from \"./MessageItem\";\n\nimport dayjs from \"../dayjs\";\nimport { getLoggedUserToken } from \"../utils\";\nimport { showSnackBarAction, uploadImageInFirebaseSuccessAction, uploadImageInFirebaseFailureAction } from \"../redux/actions/index\";\nimport {\n    CHAT_ACTION_BOX_HEIGHT,\n    REPLY_PREVIEW_BOX_HEIGHT,\n    CHAT_ACTION_WITH_REPLY_PREVIEW_BOX_HEIGHT,\n    MSG_TYPE_IMAGE,\n    MSG_TYPE_REPLY,\n    ALLOWED_IMAGE_TYPES,\n    DEFAULT_DATE,\n} from \"../constants\";\nimport {\n    setUserActiveStatus,\n    getActiveStatusOfAUser,\n    getMessagesOfAChatRoom,\n    getPaginatedMessages,\n    removeGetMessagesOfAChatRoomFirebaseQuery,\n    sendMessageInAChatRoom,\n    readingNewMessagesOfTheLoggedUserForThatChatRoom,\n    setUserTypeStatus,\n    getTypeStatusOfAUser,\n    uploadImageInFirebase,\n} from \"../firebaseQueries\";\n\nfunction ChatPageContent({\n    isGettingChatRoomMessages,\n    isInitialMessagesFetched,\n    isUploadingImage,\n    isANewMessage,\n    chatRoomId,\n    activeStatusOfAUser,\n    typeStatusOfAUser,\n    chatRoomDetails: {\n        usernameOfSecondUser,\n        userTokenOfSecondUser,\n    } = {},\n    chatRoomMessages = [],\n    dispatch,\n}) {\n    dayjs.extend(localizedFormat);\n\n    const imageInputRef = useRef();\n    const textInputRef = useRef();\n    const chatContentRef = useRef(null);\n\n    const [selectedMsgForReply, setSelectedMsgForReply] = useState(null);\n    const [viewImg, setViewImg] = useState(null);\n    const [choosedImg, setChoosedImg] = useState(null);\n    const [msgText, setMsgText] = useState(\"\");\n    const [msgIdToScrollTo, setMmsgIdToScrollTo] = useState(null);\n\n    //to get messages of the room\n    //getting active status of the 2nd user and setting active status of the logged user\n    useEffect(() => {\n        getMessagesOfAChatRoom(dispatch, chatRoomId);\n        getActiveStatusOfAUser(dispatch, userTokenOfSecondUser);\n        setUserActiveStatus(true);\n        getTypeStatusOfAUser(dispatch, chatRoomId, userTokenOfSecondUser);\n        readingNewMessagesOfTheLoggedUserForThatChatRoom(chatRoomId);\n\n        const setActiveStatusInterval = setInterval(function() {\n            getActiveStatusOfAUser(dispatch, userTokenOfSecondUser);\n            setUserActiveStatus(true);\n        }, 10000); //setting user lastActive time every 10 seconds\n        // other users need to compare their local time with that user lastActiveTime to get his active status\n\n        const getTypeStatusInterval = setInterval(function() {\n            getTypeStatusOfAUser(dispatch, chatRoomId, userTokenOfSecondUser);\n        }, 1000); //getting user typings status in 1 s\n        //other users need to compare their local time with that user lastTypedTime to get his typing status\n\n        return () => {\n            removeGetMessagesOfAChatRoomFirebaseQuery(chatRoomId);\n            clearInterval(setActiveStatusInterval);\n            clearInterval(getTypeStatusInterval);\n            readingNewMessagesOfTheLoggedUserForThatChatRoom(chatRoomId);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (isInitialMessagesFetched) {\n            chatContentRef.current && chatContentRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n        }\n    }, [isInitialMessagesFetched]);\n\n    //to scroll the chat window to bottom when a new message comes\n    useEffect(() => {\n        chatContentRef.current && chatContentRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n\n        readingNewMessagesOfTheLoggedUserForThatChatRoom(chatRoomId);\n    }, [isANewMessage]);\n\n    function loadMoreMessages() {\n        const messageIdOfTheFirstMessageInList = (chatRoomMessages[0] || {}).messageId;\n        getPaginatedMessages(dispatch, chatRoomId, messageIdOfTheFirstMessageInList);\n    }\n\n    async function handleSendMsgBtnClick(e) {\n        e.preventDefault();\n\n        if (choosedImg) {\n            await uploadImageInFirebase(dispatch, choosedImg)\n                .then((snapshot) => {\n                    snapshot.getDownloadURL()\n                        .then((downloadURL) => {\n                            if (downloadURL) {\n                                sendMessageInAChatRoom(chatRoomId, downloadURL, MSG_TYPE_IMAGE, userTokenOfSecondUser);\n                                setChoosedImg(null);\n                            }\n                            dispatch(uploadImageInFirebaseSuccessAction());\n                        });\n                })\n                .catch((error) => {\n                    dispatch(uploadImageInFirebaseFailureAction({ msg: \"Fail to upload image\" }));\n                });\n        } else {\n            if (msgText.trim() !== \"\") {\n                setMsgText(\"\");\n                if (selectedMsgForReply) {\n                    setSelectedMsgForReply(null);\n                    await sendMessageInAChatRoom(chatRoomId, msgText, MSG_TYPE_REPLY, userTokenOfSecondUser, selectedMsgForReply);\n                } else {\n                    await sendMessageInAChatRoom(chatRoomId, msgText, \"text\", userTokenOfSecondUser);\n                }\n            }\n        }\n    }\n\n    function handleChangeMsgInput(e) {\n        setMsgText(e.target.value)\n        setUserTypeStatus(chatRoomId);\n    }\n\n    function handleImageUploadIconClick() {\n        imageInputRef.current && imageInputRef.current.click();\n    }\n\n    async function handleSelectImage(event) {\n        try {\n            if (event.target.files && event.target.files[0]) {\n                const selectedImg = event.target.files[0];\n                const selectedImgType = selectedImg.type;\n                if (ALLOWED_IMAGE_TYPES.includes(selectedImgType)) {\n                    setChoosedImg(selectedImg);\n                } else {\n                    dispatch(showSnackBarAction(\"Only images are allowed\"));\n                }\n            }\n        } catch (e) {\n            dispatch(showSnackBarAction(\"Fail to select image\", e));\n        }\n    }\n\n    function handleImageClick(event, src) {\n        event.stopPropagation(); //to prevent trigger of parent onClick\n\n        if (src) {\n            setViewImg(src);\n        }\n    }\n\n    function handleReplyIconClick(event, msg) {\n        event.stopPropagation(); //to prevent trigger of parent onClick\n\n        if (!msg) return;\n        setSelectedMsgForReply(msg);\n        textInputRef.current && textInputRef.current.focus();\n    }\n\n    function handleOriginalMsgClick(orgMsgId) {\n        if (!orgMsgId) return;\n        setMmsgIdToScrollTo(orgMsgId);\n\n        //resetting msgIdToScrollTo to null\n        setTimeout(function() {\n            setMmsgIdToScrollTo(null);\n        }, 1000);\n    }\n\n    function renderMessages() {\n        const loggedUserToken = getLoggedUserToken();\n\n        const messageIds = [];\n        const toRender = chatRoomMessages.map(function(msg, index) {\n            if (typeof msg !== \"object\") return;\n\n            const messageId = msg.messageId;\n            if (messageIds.includes(messageId)) return; //to avoid repetition of messages\n            messageIds.push(messageId);\n\n            return (\n                <MessageItem\n                    key={messageId + index}\n                    loggedUserToken={loggedUserToken}\n                    formattedTime={dayjs(DEFAULT_DATE + msg.time).format(\"LT\")}\n                    msgIdToScrollTo={msgIdToScrollTo}\n                    msg={msg}\n                    onImageClick={handleImageClick}\n                    onReplyIconClick={handleReplyIconClick}\n                    onOriginalMsgClick={handleOriginalMsgClick}\n                />\n            )\n        });\n\n        return toRender;\n    }\n\n    return (\n        <PurpleGradientContainer childrenClassName=\"homeContainer\">\n            {\n                viewImg ?\n                    <ImageViewer src={viewImg} onClose={() => setViewImg(null)} />\n                    : null\n            }\n\n            <div\n                className=\"chatWindow\"\n                style={{\n                    \"--actionBoxHeight\":\n                        selectedMsgForReply ?\n                            CHAT_ACTION_WITH_REPLY_PREVIEW_BOX_HEIGHT\n                            : CHAT_ACTION_BOX_HEIGHT\n                }}\n            >\n                <div className=\"chatTitle\">\n                    <img alt=\"userIcon\" src={userIcon} />\n                    <div>\n                        <div className=\"lightTitle\">{usernameOfSecondUser}</div>\n                        <div className=\"onlineStatus\">\n                            {\n                                typeStatusOfAUser ?\n                                    typeStatusOfAUser\n                                    :\n                                    activeStatusOfAUser ?\n                                        activeStatusOfAUser !== \"online\" ?\n                                            dayjs(activeStatusOfAUser).format(\"lll\")\n                                            : \"online\"\n                                        : \"\"\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <div id=\"chatContent\" className=\"chatContent\">\n                    <InfiniteScroll\n                        hasMore={true}\n                        inverse={true}\n                        scrollThreshold={1}\n                        dataLength={chatRoomMessages.length}\n                        scrollableTarget=\"chatContent\"\n                        next={loadMoreMessages}\n                    >\n                        <>\n                            <LoadingAnimation loading={isGettingChatRoomMessages} className=\"chatWindowLoader\" />\n                            {renderMessages()}\n                        </>\n                    </InfiniteScroll>\n\n                    <div style={{ float: \"left\", clear: \"both\" }} ref={chatContentRef} />\n                </div>\n            </div>\n\n            {\n                selectedMsgForReply ?\n                    <div className=\"replyMsgPreviewContainer\" style={{ \"--replyBoxHeight\": REPLY_PREVIEW_BOX_HEIGHT }} >\n                        {\n                            selectedMsgForReply.type === MSG_TYPE_IMAGE ?\n                                <ImageWithLoader\n                                    className=\"replyMsgPreviewImg\"\n                                    src={selectedMsgForReply.message}\n                                    onClick={() => handleImageClick(selectedMsgForReply.message)}\n                                />\n                                :\n                                <div className=\"replyMsgPreviewMsg\" title={selectedMsgForReply.message}>{selectedMsgForReply.message}</div>\n                        }\n                    </div>\n                    : null\n            }\n\n            <form\n                className=\"chatActionBox\"\n                style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                onSubmit={handleSendMsgBtnClick}\n            >\n                {\n                    isUploadingImage ?\n                        <LoadingAnimation loading={isUploadingImage} />\n                        :\n                        <>\n                            {\n                                choosedImg ?\n                                    <>\n                                        <img alt=\"closeIcon\" className=\"closeIcon\" src={closeIcon} onClick={() => setChoosedImg(null)} />\n                                        <img alt=\"choosenImg\" className=\"sendImgPreview\" src={URL.createObjectURL(choosedImg)} />\n                                    </>\n                                    :\n                                    <>\n                                        <input\n                                            ref={imageInputRef}\n                                            style={{ display: \"none\" }}\n                                            type=\"file\"\n                                            name=\"myImage\"\n                                            onChange={handleSelectImage}\n                                            accept=\"image/*\"\n                                        />\n\n                                        {\n                                            selectedMsgForReply ?\n                                                <img alt=\"closeIcon\" className=\"closeIcon\" src={closeIcon} onClick={() => setSelectedMsgForReply(null)} />\n                                                :\n                                                <img alt=\"uploadImgIcon\" className=\"chatActionBoxImg\" src={uploadImgIcon} onClick={handleImageUploadIconClick} />\n                                        }\n\n                                        <input\n                                            ref={textInputRef}\n                                            type=\"text\"\n                                            className=\"sendMsgTextInput\"\n                                            placeholder=\"type message\"\n                                            autoFocus\n                                            value={msgText}\n                                            onChange={handleChangeMsgInput}\n                                        />\n                                    </>\n                            }\n\n                            <img alt=\"sendIcon\" src={sendIcon} onClick={handleSendMsgBtnClick} className=\"chatActionBoxImg\" />\n                        </>\n                }\n            </form>\n        </PurpleGradientContainer >\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGettingChatRoomMessages: state.isGettingChatRoomMessages,\n        isInitialMessagesFetched: state.isInitialMessagesFetched,\n        isUploadingImage: state.isUploadingImage,\n        isANewMessage: state.isANewMessage,\n        activeStatusOfAUser: state.activeStatusOfAUser,\n        typeStatusOfAUser: state.typeStatusOfAUser,\n        chatRoomDetails: state.chatRoomDetails,\n        chatRoomMessages: state.chatRoomMessages,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(ChatPageContent);","/Users/mngos/Documents/MNgoChat3Web/src/pages/NewChat.js",["188","189","190"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport userIcon from \"../images/user.png\";\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport ActionButton from \"../components/ActionButton\";\n\nimport { CHAT_ACTION_BOX_HEIGHT } from \"../constants\";\nimport { checkLoginStatusAction, showSnackBarAction } from \"../redux/actions/index\";\nimport { startANewChatRoom } from \"../firebaseQueries\";\n\nfunction NewChat({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    isStartingANewChatRoom,\n    isANewChatRoomStarted,\n    newChatRoomDetails: {\n        chatRoomId,\n    },\n    userDetails: {\n        username: loggedUsername\n    } = {},\n    match: {\n        params: {\n            selectedUserDetails,\n        } = {}\n    } = {},\n    dispatch,\n}) {\n    const [redirectToChat, setRedirectToChat] = useState(false);\n    const [secondUserDetails, setSecondUserDetails] = useState({});\n\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    useEffect(() => {\n        if (isSomeoneLoggedIn) {\n            try {\n                const selectedUserDetailsObj = JSON.parse(selectedUserDetails);\n                const secondUsername = selectedUserDetailsObj.name;\n                const secondUserToken = selectedUserDetailsObj.token;\n                if (secondUsername && secondUserToken) {\n                    setSecondUserDetails({ secondUserToken, secondUsername });\n                } else {\n                    dispatch(showSnackBarAction(\"Invalid user selected\"));\n                }\n            } catch (e) {\n                dispatch(showSnackBarAction(\"Invalid user selected\"));\n            }\n        }\n    }, [isSomeoneLoggedIn]);\n\n    useEffect(() => {\n        if (isANewChatRoomStarted && chatRoomId) {\n            setRedirectToChat(true);\n        }\n    }, [isANewChatRoomStarted]);\n\n    function handleStartBtnClick() {\n        startANewChatRoom({ dispatch, loggedUsername, ...secondUserDetails });\n    }\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (!isSomeoneLoggedIn) {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToChat ? <Redirect to={\"/chat/\" + chatRoomId} /> : null}\n            {redirectToHomeOrLoginPage()}\n\n            {\n                (!secondUserDetails.secondUsername) || isCheckingLoginStatus || !isSomeoneLoggedIn ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"homeContainer\">\n                        <div\n                            className=\"chatWindow\"\n                            style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                        >\n                            <div className=\"chatTitle\">\n                                <img alt=\"userIcon\" src={userIcon} />\n                                <div>\n                                    <div className=\"lightTitle\">{secondUserDetails.secondUsername}</div>\n                                </div>\n                            </div>\n\n                            <div id=\"chatContent\" className=\"chatContent\"></div>\n                            <div\n                                className=\"chatActionBox\"\n                                style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                            >\n                                <ActionButton\n                                    dark={false}\n                                    showLoader={isStartingANewChatRoom}\n                                    buttonText=\"Start Chat\"\n                                    onClick={handleStartBtnClick}\n                                />\n                            </div>\n                        </div>\n                    </PurpleGradientContainer>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n        isStartingANewChatRoom: state.isStartingANewChatRoom,\n        isANewChatRoomStarted: state.isANewChatRoomStarted,\n        newChatRoomDetails: state.newChatRoomDetails,\n        userDetails: state.userDetails,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(NewChat);","/Users/mngos/Documents/MNgoChat3Web/src/dayjs.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/ImageViewer.js",["191","192"],"import React, { useState } from 'react';\n\nimport closeIcon from \"../images/close.png\";\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nexport default function ImageViewer({\n    src,\n    onClose,\n}) {\n    const [showLoader, setShowLoader] = useState(true);\n\n    if (!src) return;\n    return (\n        <div className=\"imageViewer\">\n            <div className=\"imageViewerBg\" onClick={onClose} />\n            <img src={closeIcon} className=\"imageViewerCloseIcon\" onClick={onClose} />\n            <LoadingAnimation loading={showLoader} />\n            <img src={src} className=\"imageViewerImg\" onLoad={() => setShowLoader(false)} onError={() => setShowLoader(false)} />\n        </div>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageWithLoader.js",["193"],"import React, { useState } from 'react';\n\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nexport default function ImageWithLoader({\n    className,\n    loaderClassName,\n    src,\n    onClick,\n}) {\n    const [showLoader, setShowLoader] = useState(true);\n\n    if (!src) return;\n    return (\n        <>\n            <LoadingAnimation loading={showLoader} loaderClassName={loaderClassName} />\n            <img src={src} className={className} onLoad={() => setShowLoader(false)} onClick={onClick} onError={() => setShowLoader(false)} />\n        </>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/OfflineModal.js",["194"],"import React from 'react';\n\nimport warningImg from \"../images/warning.png\";\n\nexport default function OfflineModal() {\n    return (\n        <div className=\"warningModal\">\n            <div className=\"imageViewerBg\" />\n            <img src={warningImg} className=\"imageViewerImg\" />\n            <br />\n            <div className=\"redTitle\">You are not connected to internet</div>\n        </div>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/MessageItem.js",["195","196","197","198","199"],"import React, { useRef, useEffect } from 'react';\nimport cx from \"classnames\";\n\nimport replyIcon from \"../images/reply.png\";\nimport ImageWithLoader from \"./ImageWithLoader\";\n\nimport { MSG_TYPE_IMAGE, MSG_TYPE_REPLY } from \"../constants\";\n\nexport default function MessageItem({\n    loggedUserToken,\n    formattedTime,\n    msgIdToScrollTo,\n    msg,\n    onImageClick,\n    onReplyIconClick,\n    onOriginalMsgClick,\n}) {\n    const msgRef = useRef(null);\n\n    useEffect(() => {\n        if (msgIdToScrollTo === msg.messageId) {\n            msgRef.current && msgRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n        }\n    }, [msgIdToScrollTo, msg.messageId]);\n\n    const type = msg.type;\n    const message = msg.message;\n    const originalMessage = msg.originalMessage;\n    const originalMessageType = msg.originalMessageType;\n    const isMineMsg = msg.sentByUserToken === loggedUserToken;\n\n    function handleReplyIconClick(event) {\n        onReplyIconClick(event, msg)\n    }\n\n    return (\n        <div className={\"messageContainer\"} ref={msgRef}>\n            <div className={cx(\"message\", { [\"myMessageAlignment\"]: msg.sentByUserToken === loggedUserToken })}>\n                <div className={cx({ [\"myMessage\"]: isMineMsg }, { [\"theirMessage\"]: !isMineMsg })} onClick={() => onOriginalMsgClick(msg.originalMessageId)}>\n                    {\n                        type === MSG_TYPE_REPLY ?\n                            <div className=\"replyMessageItem\" >\n                                {\n                                    originalMessageType === MSG_TYPE_IMAGE ?\n                                        <ImageWithLoader\n                                            src={originalMessage}\n                                            className=\"messageImg\"\n                                            onClick={(event) => onImageClick(event, originalMessage)}\n                                        />\n                                        : originalMessage\n                                }\n                            </div>\n                            : null\n                    }\n                    {\n                        type === MSG_TYPE_IMAGE ?\n                            <ImageWithLoader\n                                src={message}\n                                className=\"messageImg\"\n                                onClick={(event) => onImageClick(event, message)}\n                            />\n                            : message\n                    }\n                    <img\n                        alt=\"replyIcon\"\n                        className={cx({ [\"myReplyIcon\"]: isMineMsg }, { [\"theirReplyIcon\"]: !isMineMsg })}\n                        src={replyIcon}\n                        onClick={handleReplyIconClick}\n                    />\n                </div>\n            </div>\n            <div className=\"messageTime\">{formattedTime}</div>\n        </div>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/FirebaseConfig.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/encryptionConstants.js",[],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":16,"column":8,"nodeType":"206","endLine":16,"endColumn":10,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":16,"column":53,"nodeType":"210","messageId":"211","endLine":16,"endColumn":73,"fix":"212"},{"ruleId":"213","severity":1,"message":"214","line":67,"column":24,"nodeType":"215","messageId":"216","endLine":67,"endColumn":25,"suggestions":"217"},{"ruleId":"213","severity":1,"message":"214","line":67,"column":49,"nodeType":"215","messageId":"216","endLine":67,"endColumn":50,"suggestions":"218"},{"ruleId":"204","severity":1,"message":"219","line":46,"column":8,"nodeType":"206","endLine":46,"endColumn":23,"suggestions":"220"},{"ruleId":"204","severity":1,"message":"205","line":30,"column":8,"nodeType":"206","endLine":30,"endColumn":10,"suggestions":"221"},{"ruleId":"204","severity":1,"message":"205","line":22,"column":8,"nodeType":"206","endLine":22,"endColumn":10,"suggestions":"222"},{"ruleId":"208","severity":1,"message":"223","line":18,"column":19,"nodeType":"210","messageId":"211","endLine":18,"endColumn":51,"fix":"224"},{"ruleId":"208","severity":1,"message":"225","line":30,"column":31,"nodeType":"210","messageId":"211","endLine":30,"endColumn":58,"fix":"226"},{"ruleId":"204","severity":1,"message":"227","line":38,"column":8,"nodeType":"206","endLine":38,"endColumn":26,"suggestions":"228"},{"ruleId":"204","severity":1,"message":"229","line":51,"column":8,"nodeType":"206","endLine":51,"endColumn":10,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":104,"column":39,"nodeType":"233","messageId":"234","endLine":104,"endColumn":46},{"ruleId":"231","severity":1,"message":"232","line":105,"column":31,"nodeType":"233","messageId":"234","endLine":105,"endColumn":38},{"ruleId":"208","severity":1,"message":"235","line":109,"column":53,"nodeType":"210","messageId":"211","endLine":109,"endColumn":90,"fix":"236"},{"ruleId":"231","severity":1,"message":"232","line":123,"column":39,"nodeType":"233","messageId":"234","endLine":123,"endColumn":46},{"ruleId":"231","severity":1,"message":"232","line":124,"column":31,"nodeType":"233","messageId":"234","endLine":124,"endColumn":38},{"ruleId":"208","severity":1,"message":"235","line":128,"column":53,"nodeType":"210","messageId":"211","endLine":128,"endColumn":90,"fix":"237"},{"ruleId":"231","severity":1,"message":"238","line":163,"column":67,"nodeType":"239","messageId":"240","endLine":163,"endColumn":75},{"ruleId":"231","severity":1,"message":"232","line":167,"column":63,"nodeType":"233","messageId":"234","endLine":167,"endColumn":70},{"ruleId":"208","severity":1,"message":"241","line":195,"column":55,"nodeType":"210","messageId":"211","endLine":195,"endColumn":103,"fix":"242"},{"ruleId":"208","severity":1,"message":"241","line":202,"column":55,"nodeType":"210","messageId":"211","endLine":202,"endColumn":103,"fix":"243"},{"ruleId":"204","severity":1,"message":"205","line":27,"column":8,"nodeType":"206","endLine":27,"endColumn":10,"suggestions":"244"},{"ruleId":"204","severity":1,"message":"245","line":34,"column":8,"nodeType":"206","endLine":34,"endColumn":27,"suggestions":"246"},{"ruleId":"204","severity":1,"message":"247","line":94,"column":8,"nodeType":"206","endLine":94,"endColumn":10,"suggestions":"248"},{"ruleId":"204","severity":1,"message":"249","line":107,"column":8,"nodeType":"206","endLine":107,"endColumn":23,"suggestions":"250"},{"ruleId":"231","severity":1,"message":"232","line":201,"column":42,"nodeType":"233","messageId":"234","endLine":201,"endColumn":49},{"ruleId":"231","severity":1,"message":"232","line":204,"column":49,"nodeType":"233","messageId":"234","endLine":204,"endColumn":56},{"ruleId":"204","severity":1,"message":"205","line":37,"column":8,"nodeType":"206","endLine":37,"endColumn":10,"suggestions":"251"},{"ruleId":"204","severity":1,"message":"252","line":54,"column":8,"nodeType":"206","endLine":54,"endColumn":27,"suggestions":"253"},{"ruleId":"204","severity":1,"message":"249","line":60,"column":8,"nodeType":"206","endLine":60,"endColumn":31,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":16,"column":13,"nodeType":"257","endLine":16,"endColumn":87},{"ruleId":"255","severity":1,"message":"256","line":18,"column":13,"nodeType":"257","endLine":18,"endColumn":130},{"ruleId":"255","severity":1,"message":"256","line":17,"column":13,"nodeType":"257","endLine":17,"endColumn":143},{"ruleId":"255","severity":1,"message":"256","line":9,"column":13,"nodeType":"257","endLine":9,"endColumn":64},{"ruleId":"208","severity":1,"message":"258","line":38,"column":45,"nodeType":"210","messageId":"211","endLine":38,"endColumn":108,"fix":"259"},{"ruleId":"208","severity":1,"message":"260","line":39,"column":38,"nodeType":"210","messageId":"211","endLine":39,"endColumn":62,"fix":"261"},{"ruleId":"208","severity":1,"message":"262","line":39,"column":68,"nodeType":"210","messageId":"211","endLine":39,"endColumn":96,"fix":"263"},{"ruleId":"208","severity":1,"message":"264","line":66,"column":41,"nodeType":"210","messageId":"211","endLine":66,"endColumn":67,"fix":"265"},{"ruleId":"208","severity":1,"message":"266","line":66,"column":73,"nodeType":"210","messageId":"211","endLine":66,"endColumn":103,"fix":"267"},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["270"],"no-useless-computed-key","Unnecessarily computed property [\"darkLoader\"] found.","Property","unnecessarilyComputedProperty",{"range":"271","text":"272"},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["273","274"],["275","276"],"React Hook useEffect has missing dependencies: 'snackBarMsg' and 'snackBarType'. Either include them or remove the dependency array.",["277"],["278"],["279"],"Unnecessarily computed property [\"darkActionBtnContainer\"] found.",{"range":"280","text":"281"},"Unnecessarily computed property [\"darkActionBtnText\"] found.",{"range":"282","text":"283"},"React Hook useEffect has a missing dependency: 'btnClicked'. Either include it or remove the dependency array.",["284"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["285"],"array-callback-return","Array.prototype.map() expects a return value from function.","ReturnStatement","expectedReturnValue","Unnecessarily computed property [\"unSeenMsgUser\"] found.",{"range":"286","text":"287"},{"range":"288","text":"287"},"Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","Unnecessarily computed property [\"selectedBottomTabIcon\"] found.",{"range":"289","text":"290"},{"range":"291","text":"290"},["292"],"React Hook useEffect has missing dependencies: 'chatRoomId' and 'dispatch'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["293"],"React Hook useEffect has missing dependencies: 'chatRoomId', 'dispatch', and 'userTokenOfSecondUser'. Either include them or remove the dependency array.",["294"],"React Hook useEffect has a missing dependency: 'chatRoomId'. Either include it or remove the dependency array.",["295"],["296"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUserDetails'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["297"],["298"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Unnecessarily computed property [\"myMessageAlignment\"] found.",{"range":"299","text":"300"},"Unnecessarily computed property [\"myMessage\"] found.",{"range":"301","text":"302"},"Unnecessarily computed property [\"theirMessage\"] found.",{"range":"303","text":"304"},"Unnecessarily computed property [\"myReplyIcon\"] found.",{"range":"305","text":"306"},"Unnecessarily computed property [\"theirReplyIcon\"] found.",{"range":"307","text":"308"},"no-global-assign","no-unsafe-negation",{"desc":"309","fix":"310"},[372,386],"\"darkLoader\"",{"messageId":"311","fix":"312","desc":"313"},{"messageId":"314","fix":"315","desc":"316"},{"messageId":"311","fix":"317","desc":"313"},{"messageId":"314","fix":"318","desc":"316"},{"desc":"319","fix":"320"},{"desc":"309","fix":"321"},{"desc":"309","fix":"322"},[365,391],"\"darkActionBtnContainer\"",[782,803],"\"darkActionBtnText\"",{"desc":"323","fix":"324"},{"desc":"309","fix":"325"},[3823,3840],"\"unSeenMsgUser\"",[4575,4592],[7512,7537],"\"selectedBottomTabIcon\"",[7797,7822],{"desc":"309","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"309","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},[1105,1127],"\"myMessageAlignment\"",[1211,1224],"\"myMessage\"",[1241,1257],"\"theirMessage\"",[2595,2610],"\"myReplyIcon\"",[2627,2645],"\"theirReplyIcon\"","Update the dependencies array to be: [dispatch]",{"range":"338","text":"339"},"removeEscape",{"range":"340","text":"341"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"342","text":"343"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"344","text":"341"},{"range":"345","text":"343"},"Update the dependencies array to be: [snackBarCount, snackBarMsg, snackBarType]",{"range":"346","text":"347"},{"range":"348","text":"339"},{"range":"349","text":"339"},"Update the dependencies array to be: [btnClicked, isUserRegistered]",{"range":"350","text":"351"},{"range":"352","text":"339"},{"range":"353","text":"339"},"Update the dependencies array to be: [chatRoomId, dispatch, isSomeoneLoggedIn]",{"range":"354","text":"355"},"Update the dependencies array to be: [chatRoomId, dispatch, userTokenOfSecondUser]",{"range":"356","text":"357"},"Update the dependencies array to be: [chatRoomId, isANewMessage]",{"range":"358","text":"359"},{"range":"360","text":"339"},"Update the dependencies array to be: [dispatch, isSomeoneLoggedIn, selectedUserDetails]",{"range":"361","text":"362"},"Update the dependencies array to be: [chatRoomId, isANewChatRoomStarted]",{"range":"363","text":"364"},[420,422],"[dispatch]",[1546,1547],"",[1546,1546],"\\",[1571,1572],[1571,1571],[1174,1189],"[snackBarCount, snackBarMsg, snackBarType]",[888,890],[682,684],[1243,1261],"[btnClicked, isUserRegistered]",[1559,1561],[654,656],[823,842],"[chatRoomId, dispatch, isSomeoneLoggedIn]",[3603,3605],"[chatRoomId, dispatch, userTokenOfSecondUser]",[4111,4126],"[chatRoomId, isANewMessage]",[1133,1135],[1812,1831],"[dispatch, isSomeoneLoggedIn, selectedUserDetails]",[1962,1985],"[chatRoomId, isANewChatRoomStarted]"]