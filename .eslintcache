[{"/Users/mngos/Documents/MNgoChat3Web/src/index.js":"1","/Users/mngos/Documents/MNgoChat3Web/src/App.js":"2","/Users/mngos/Documents/MNgoChat3Web/src/Routes.js":"3","/Users/mngos/Documents/MNgoChat3Web/src/pages/NotFound.js":"4","/Users/mngos/Documents/MNgoChat3Web/src/redux/store.js":"5","/Users/mngos/Documents/MNgoChat3Web/src/redux/reducers/rootReducer.js":"6","/Users/mngos/Documents/MNgoChat3Web/src/pages/Landing.js":"7","/Users/mngos/Documents/MNgoChat3Web/src/components/LoadingAnimation.js":"8","/Users/mngos/Documents/MNgoChat3Web/src/utils.js":"9","/Users/mngos/Documents/MNgoChat3Web/src/constants.js":"10","/Users/mngos/Documents/MNgoChat3Web/src/redux/actions/index.js":"11","/Users/mngos/Documents/MNgoChat3Web/src/apis.js":"12","/Users/mngos/Documents/MNgoChat3Web/src/components/PurpleGradientContainer.js":"13","/Users/mngos/Documents/MNgoChat3Web/src/components/GreyGradientContainer.js":"14","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBarWrapper.js":"15","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBar.js":"16","/Users/mngos/Documents/MNgoChat3Web/src/pages/Login.js":"17","/Users/mngos/Documents/MNgoChat3Web/src/pages/Home.js":"18","/Users/mngos/Documents/MNgoChat3Web/src/components/ActionButton.js":"19","/Users/mngos/Documents/MNgoChat3Web/src/components/SignInUpButton.js":"20","/Users/mngos/Documents/MNgoChat3Web/src/components/LandingPageDesign.js":"21","/Users/mngos/Documents/MNgoChat3Web/src/pages/Register.js":"22","/Users/mngos/Documents/MNgoChat3Web/src/components/VerifyPasscode.js":"23","/Users/mngos/Documents/MNgoChat3Web/src/components/HomePageContent.js":"24","/Users/mngos/Documents/MNgoChat3Web/src/firebaseQueries.js":"25","/Users/mngos/Documents/MNgoChat3Web/src/FirebaseConfig.js":"26","/Users/mngos/Documents/MNgoChat3Web/src/pages/Chat.js":"27","/Users/mngos/Documents/MNgoChat3Web/src/components/ChatPageContent.js":"28","/Users/mngos/Documents/MNgoChat3Web/src/pages/NewChat.js":"29","/Users/mngos/Documents/MNgoChat3Web/src/encryptionConstants.js":"30","/Users/mngos/Documents/MNgoChat3Web/src/dayjs.js":"31","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageViewer.js":"32","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageWithLoader.js":"33","/Users/mngos/Documents/MNgoChat3Web/src/components/OfflineModal.js":"34"},{"size":176,"mtime":1611987774533,"results":"35","hashOfConfig":"36"},{"size":395,"mtime":1612004842265,"results":"37","hashOfConfig":"36"},{"size":932,"mtime":1612335403903,"results":"38","hashOfConfig":"36"},{"size":127,"mtime":1611987877261,"results":"39","hashOfConfig":"36"},{"size":229,"mtime":1611986021286,"results":"40","hashOfConfig":"36"},{"size":13394,"mtime":1612410941804,"results":"41","hashOfConfig":"36"},{"size":1092,"mtime":1612024932299,"results":"42","hashOfConfig":"36"},{"size":456,"mtime":1612272257813,"results":"43","hashOfConfig":"36"},{"size":4440,"mtime":1612358824542,"results":"44","hashOfConfig":"36"},{"size":1709,"mtime":1612371824738,"results":"45","hashOfConfig":"36"},{"size":8742,"mtime":1612410902402,"results":"46","hashOfConfig":"36"},{"size":1623,"mtime":1612029072017,"results":"47","hashOfConfig":"36"},{"size":575,"mtime":1612001849296,"results":"48","hashOfConfig":"36"},{"size":625,"mtime":1612001939665,"results":"49","hashOfConfig":"36"},{"size":4332,"mtime":1612365544310,"results":"50","hashOfConfig":"36"},{"size":577,"mtime":1612004483020,"results":"51","hashOfConfig":"36"},{"size":3916,"mtime":1612062014815,"results":"52","hashOfConfig":"36"},{"size":1838,"mtime":1612273727483,"results":"53","hashOfConfig":"36"},{"size":1008,"mtime":1612018737347,"results":"54","hashOfConfig":"36"},{"size":447,"mtime":1612008632632,"results":"55","hashOfConfig":"36"},{"size":1333,"mtime":1612021617383,"results":"56","hashOfConfig":"36"},{"size":6120,"mtime":1612066271225,"results":"57","hashOfConfig":"36"},{"size":1737,"mtime":1612273417184,"results":"58","hashOfConfig":"36"},{"size":8317,"mtime":1612341288269,"results":"59","hashOfConfig":"36"},{"size":14035,"mtime":1612411780263,"results":"60","hashOfConfig":"36"},{"size":539,"mtime":1612076140501,"results":"61","hashOfConfig":"36"},{"size":1843,"mtime":1612363632357,"results":"62","hashOfConfig":"36"},{"size":12334,"mtime":1612411618100,"results":"63","hashOfConfig":"36"},{"size":4509,"mtime":1612339281667,"results":"64","hashOfConfig":"36"},{"size":48,"mtime":1612319836974,"results":"65","hashOfConfig":"36"},{"size":96,"mtime":1612322829367,"results":"66","hashOfConfig":"36"},{"size":692,"mtime":1612412047094,"results":"67","hashOfConfig":"36"},{"size":488,"mtime":1612412041964,"results":"68","hashOfConfig":"36"},{"size":400,"mtime":1612365846001,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1v2xoz5",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"115","usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":4,"source":"127","usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"72"},"/Users/mngos/Documents/MNgoChat3Web/src/index.js",[],["151","152"],"/Users/mngos/Documents/MNgoChat3Web/src/App.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/Routes.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/NotFound.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/store.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/reducers/rootReducer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Landing.js",["153"],"import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport LandingPageDesign from \"../components/LandingPageDesign\";\n\nimport { checkLoginStatusAction } from \"../redux/actions/index\";\n\nfunction Landing({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    dispatch,\n}) {\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (isSomeoneLoggedIn) {\n                return <Redirect to=\"/home\" />;\n            } else {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Landing);","/Users/mngos/Documents/MNgoChat3Web/src/components/LoadingAnimation.js",["154"],"import React from \"react\";\nimport cx from \"classnames\";\n\nimport loaderImg from '../images/loader.gif';\n\nexport default function LoadingAnimation({\n    dark,\n    loading,\n    className,\n}) {\n    return loading ? (\n        <center className={className}>\n            <img\n                alt=\"loading\"\n                className={cx(\"loadingAnimation\", { [\"darkLoader\"]: dark })}\n                src={loaderImg}\n            />\n        </center>\n    ) : null;\n}","/Users/mngos/Documents/MNgoChat3Web/src/utils.js",["155","156"],"import React from 'react';\nimport CryptoJS from \"crypto-js\";\nimport Cookies from \"universal-cookie\";\nimport { animateScroll } from \"react-scroll\";\nimport Slide from '@material-ui/core/Slide';\n\nimport { ENCRYPTION_KEY } from \"./encryptionConstants\";\nimport { COOKIE_EXPIRATION_TIME, LOGGED_USER_TOKEN_COOKIE_NAME } from \"./constants\";\nconst cookies = new Cookies();\n\n//animation for apperance of dialog box\nexport const Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n//function to get cookie value\nexport function getCookieValue(cookie_name) {\n    let value = null;\n    try {\n        const cookieValue = cookies.get(cookie_name);\n        if (cookieValue) {\n            value = cookieValue;\n        }\n    } catch {\n        value = null;\n    }\n\n    return value;\n};\n\n//function to set cookie \nexport function makeCookie(key, value) {\n    try {\n        cookies.set(key, value, { path: \"/\", expires: COOKIE_EXPIRATION_TIME, });\n\n        return true;\n    } catch {\n        return false;\n    }\n};\n\nexport function encryptText(text) {\n    try {\n        const encryptedValue = CryptoJS.AES.encrypt(text, ENCRYPTION_KEY).toString();\n        return encryptedValue;\n    } catch {\n        return null;\n    }\n}\n\nexport function decryptText(enryptedValue) {\n    let value = null;\n    try {\n        const decrypted = CryptoJS.AES.decrypt(enryptedValue, ENCRYPTION_KEY);\n        value = CryptoJS.enc.Utf8.stringify(decrypted);\n    } catch {\n        return null;\n    }\n\n    return value;\n}\n\n//function to validate name, contact no and email\nexport function validateUsername(name) {\n    var re = /^[a-zA-Z0-9_]*$/;\n    return re.test(name);\n};\n\nexport function validateName(name) {\n    var re = /^[a-zA-Z0-9 ]*$/;\n    return re.test(name);\n};\n\nexport function validateEmail(email) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n};\n\nexport function validateNumber(number) {\n    var re = /^[0-9]*$/;\n    return re.test(number);\n};\n\nexport function getLoggedUserToken() {\n    return getCookieValue(LOGGED_USER_TOKEN_COOKIE_NAME);\n}\n\nexport function getUserTokenOfTheSecondUser(members) {\n    if (!members) {\n        return null\n    }\n    let userTokenOfSecondUser = null;\n\n    const loggedUserToken = getLoggedUserToken();\n    if (Object.keys(members).length === 2) {\n        try {\n            for (const userToken in members) {\n                if (userToken !== loggedUserToken) {\n                    userTokenOfSecondUser = userToken;\n                    break;\n                }\n            }\n        } catch { }\n    }\n\n    return userTokenOfSecondUser;\n}\n\nexport function getUsernameOfTheSecondUser(members) {\n    if (!members) {\n        return null\n    }\n    let usernameOfSecondUser = null;\n\n    const loggedUserToken = getLoggedUserToken();\n    if (Object.keys(members).length === 2) {\n        try {\n            for (const userToken in members) {\n                if (userToken !== loggedUserToken) {\n                    usernameOfSecondUser = members[userToken].name;\n                    break;\n                }\n            }\n        } catch { }\n    }\n\n    return usernameOfSecondUser;\n}\n\nexport function scrollADivToBottom(containerId) {\n    if (!containerId) {\n        return;\n    }\n\n    animateScroll.scrollToBottom({\n        containerId: containerId,\n        duration: 500,\n    });\n}\n\nexport function isEmpty(obj) {\n\n    // null and undefined are \"empty\"\n    if (obj == null) return true;\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length > 0) return false;\n    if (obj.length === 0) return true;\n\n    // If it isn't an object at this point\n    // it is empty, but it can't be anything *but* empty\n    // Is it empty?  Depends on your application.\n    if (typeof obj !== \"object\") return true;\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE < 9\n    for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n}\n\n//function to logout\nexport async function logout() {\n    console.log(\"logging out\");\n    await cookies.remove(LOGGED_USER_TOKEN_COOKIE_NAME, { path: \"/\", expires: COOKIE_EXPIRATION_TIME });\n};","/Users/mngos/Documents/MNgoChat3Web/src/constants.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/actions/index.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/apis.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/PurpleGradientContainer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/GreyGradientContainer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBarWrapper.js",["157"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport SnackBar from \"./SnackBar\";\nimport OfflineModal from \"./OfflineModal\";\n\nfunction SnackBarWrapper({\n    snackBarCount,\n    snackBarMsg,\n    snackBarType,\n\n    checkLoginStatusError,\n    loginUserError,\n\n    isUserRegistered,\n    registerUserError,\n\n    verifyPasscodeError,\n    getUserAllChatsError,\n    getAllUsersError,\n    getChatRoomDetailsError,\n    startNewChatRoomError,\n    uploadImageError,\n\n    children,\n}) {\n    const [showOfflineWarning, setShowOffLineWarning] = useState(false);\n    const [snackBarVisible, setSnackBarVisible] = useState(false);\n    const [snackBarMsgState, setSnackBarMsgState] = useState(\"\");\n    const [snackBarTypeState, setSnackBarTypeState] = useState(\"success\")\n\n    useEffect(() => {\n        window.addEventListener('offline', function(e) {\n            console.log('offline');\n            setShowOffLineWarning(true);\n        });\n\n        window.addEventListener('online', function(e) {\n            console.log('online');\n            setShowOffLineWarning(false);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (snackBarMsg) {\n            makeSnackBar(snackBarMsg, snackBarType);\n        }\n    }, [snackBarCount]);\n\n    useEffect(() => {\n        if (checkLoginStatusError) {\n            makeSnackBar(checkLoginStatusError);\n        }\n    }, [checkLoginStatusError]);\n\n    useEffect(() => {\n        if (loginUserError) {\n            makeSnackBar(loginUserError);\n        }\n    }, [loginUserError]);\n\n    useEffect(() => {\n        if (registerUserError) {\n            makeSnackBar(registerUserError);\n        }\n    }, [registerUserError]);\n\n    useEffect(() => {\n        if (isUserRegistered) {\n            makeSnackBar(\"Successfully registered. Please login to continue\", \"success\");\n        }\n    }, [isUserRegistered]);\n\n    useEffect(() => {\n        if (verifyPasscodeError) {\n            makeSnackBar(verifyPasscodeError);\n        }\n    }, [verifyPasscodeError]);\n\n    useEffect(() => {\n        if (getUserAllChatsError) {\n            makeSnackBar(getUserAllChatsError);\n        }\n    }, [getUserAllChatsError]);\n\n    useEffect(() => {\n        if (getUserAllChatsError) {\n            makeSnackBar(getUserAllChatsError);\n        }\n    }, [getUserAllChatsError]);\n\n    useEffect(() => {\n        if (getAllUsersError) {\n            makeSnackBar(getAllUsersError);\n        }\n    }, [getAllUsersError]);\n\n    useEffect(() => {\n        if (getChatRoomDetailsError) {\n            makeSnackBar(getChatRoomDetailsError);\n        }\n    }, [getChatRoomDetailsError]);\n\n    useEffect(() => {\n        if (startNewChatRoomError) {\n            makeSnackBar(startNewChatRoomError);\n        }\n    }, [startNewChatRoomError]);\n\n    useEffect(() => {\n        if (uploadImageError) {\n            makeSnackBar(uploadImageError);\n        }\n    }, [uploadImageError]);\n\n    function makeSnackBar(msg, type) {\n        setSnackBarMsgState(msg);\n        setSnackBarTypeState(type);\n        setSnackBarVisible(true);\n    }\n\n    function handleSnackBarClose() {\n        setSnackBarVisible(false);\n    }\n\n    return (\n        <>\n            {\n                showOfflineWarning ?\n                    <OfflineModal />\n                    : null\n            }\n            {children}\n            <SnackBar\n                open={snackBarVisible}\n                msg={snackBarMsgState}\n                type={snackBarTypeState}\n                handleClose={handleSnackBarClose}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        snackBarCount: state.snackBarCount,\n        snackBarMsg: state.snackBarMsg,\n        snackBarType: state.snackBarType,\n\n        checkLoginStatusError: state.checkLoginStatusError,\n        loginUserError: state.loginUserError,\n\n        isUserRegistered: state.isUserRegistered,\n        registerUserError: state.registerUserError,\n\n        verifyPasscodeError: state.verifyPasscodeError,\n        getUserAllChatsError: state.getUserAllChatsError,\n        getAllUsersError: state.getAllUsersError,\n        getChatRoomDetailsError: state.getChatRoomDetailsError,\n        startNewChatRoomError: state.startNewChatRoomError,\n        uploadImageError: state.uploadImageError,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(SnackBarWrapper);","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBar.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Login.js",["158"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport logoImg from \"../images/logo.png\";\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport ActionButton from \"../components/ActionButton\";\nimport SignInUpButton from \"../components/SignInUpButton\";\n\nimport { PROJECT_NAME } from \"../constants\";\nimport {\n    showSnackBarAction,\n    checkLoginStatusAction,\n    loginUserAction\n} from \"../redux/actions/index\";\n\nfunction Login({\n    isLoggingUser,\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    history,\n    dispatch,\n}) {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    function handleLoginBtnClick(e) {\n        e.preventDefault();\n\n        if (isLoggingUser) {\n            return;\n        }\n\n        if (username !== \"\" && password !== \"\") {\n            dispatch(loginUserAction(username, password));\n        } else {\n            dispatch(showSnackBarAction(\"Please fill all the input fields\"));\n        }\n    }\n\n    function handleSignUpBtnClick() {\n        history.push(\"/register\");\n    }\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (isSomeoneLoggedIn) {\n                return <Redirect to=\"/home\" />;\n            } else {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            {\n                isCheckingLoginStatus ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                        <img\n                            className=\"logoImg\"\n                            alt=\"logoImg\"\n                            src={logoImg}\n                        />\n                        <div className=\"logoTitle\">{PROJECT_NAME}</div>\n\n                        <form className=\"formContainer\" onSubmit={handleLoginBtnClick}>\n                            <input\n                                type=\"text\"\n                                className=\"formInputField\"\n                                placeholder=\"Username\"\n                                autoFocus\n                                value={username}\n                                onChange={(e) => setUsername(e.target.value)}\n                            />\n\n                            <input\n                                type=\"password\"\n                                className=\"formInputField\"\n                                placeholder=\"Password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n\n                            <ActionButton\n                                dark={false}\n                                showLoader={isLoggingUser}\n                                buttonText=\"Login\"\n                                onClick={handleLoginBtnClick}\n                            />\n                        </form>\n\n                        <SignInUpButton\n                            otherText=\"Don't have an account yet?\"\n                            buttonText=\"Signup\"\n                            onClick={handleSignUpBtnClick}\n                        />\n                    </PurpleGradientContainer>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoggingUser: state.isLoggingUser,\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Login);","/Users/mngos/Documents/MNgoChat3Web/src/pages/Home.js",["159"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport VerifyPasscode from \"../components/VerifyPasscode\";\nimport HomePageContent from \"../components/HomePageContent\";\n\nimport { checkLoginStatusAction } from \"../redux/actions/index\";\n\nfunction Home({\n    isPasscodeVerified,\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    history,\n    dispatch,\n}) {\n    isPasscodeVerified = true;\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (!isSomeoneLoggedIn) {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            {\n                isCheckingLoginStatus || !isSomeoneLoggedIn ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                        {\n                            isPasscodeVerified ?\n                                <HomePageContent history={history} />\n                                :\n                                <VerifyPasscode />\n                        }\n                    </PurpleGradientContainer>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isPasscodeVerified: state.isPasscodeVerified,\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Home);","/Users/mngos/Documents/MNgoChat3Web/src/components/ActionButton.js",["160","161"],"import React from 'react';\nimport cx from \"classnames\";\n\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nexport default function ActionButton({\n    dark,\n    className,\n    textclassName,\n    showLoader,\n    buttonText = \"Button\",\n    onClick,\n}) {\n    return (\n        <button\n            className={cx(\n                \"actionBtnContainer\",\n                { [\"darkActionBtnContainer\"]: dark },\n                className\n            )}\n            onClick={!showLoader ? onClick : null}\n        >\n            {\n                showLoader ?\n                    <LoadingAnimation dark={!dark} loading={showLoader} />\n                    :\n                    <div\n                        className={cx(\n                            \"actionBtnText\",\n                            { [\"darkActionBtnText\"]: dark },\n                            textclassName\n                        )}\n                    >\n                        {buttonText}\n                    </div>\n            }\n        </button>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/SignInUpButton.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/LandingPageDesign.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Register.js",["162"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport logoImg from \"../images/logo.png\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport ActionButton from \"../components/ActionButton\";\n\nimport { PROJECT_NAME } from \"../constants\";\nimport {\n    validateUsername,\n    validateName,\n    validateEmail,\n    validateNumber,\n} from \"../utils\";\nimport { showSnackBarAction, registerUserAction } from \"../redux/actions/index\";\n\nfunction Register({\n    isRegisteringUser,\n    isUserRegistered,\n    dispatch,\n}) {\n    const [username, setUsername] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confPassword, setConfPassword] = useState(\"\");\n    const [passcode, setPasscode] = useState(\"\");\n    const [confPasscode, setConfPasscode] = useState(\"\");\n\n    const [redirectToLoginPage, setRedirectToLoginPage] = useState(false);\n    const [btnClicked, setBtnClicked] = useState(false);\n\n    useEffect(() => {\n        if (isUserRegistered && btnClicked) {\n            setRedirectToLoginPage(true);\n        }\n    }, [isUserRegistered]);\n\n    function handleRegisterBtnClick(e) {\n        e.preventDefault();\n\n        if (isRegisteringUser) {\n            return;\n        }\n\n        if (username !== \"\" && name !== \"\" && email !== \"\" && password !== \"\" && confPassword !== \"\" && passcode !== \"\" && confPasscode !== \"\") {\n            if (!validateUsername(username)) {\n                dispatch(showSnackBarAction(\"Username cannot contain symbol and spaces\"));\n                return;\n            }\n            if (!validateName(name)) {\n                dispatch(showSnackBarAction(\"Name cannot contain symbol and spaces\"));\n                return;\n            }\n            if (!validateEmail(email)) {\n                dispatch(showSnackBarAction(\"Invalid Email id format\"));\n                return;\n            }\n            if (password !== confPassword) {\n                dispatch(showSnackBarAction(\"Password do not match\"));\n                return;\n            }\n            if (!validateNumber(passcode)) {\n                dispatch(showSnackBarAction(\"Passcode must be a number\"));\n                return;\n            }\n            if (passcode.length !== 4) {\n                dispatch(showSnackBarAction(\"Passcode must be 4 digits long\"));\n                return;\n            }\n            if (passcode !== confPasscode) {\n                dispatch(showSnackBarAction(\"Passcode do not match\"));\n                return;\n            }\n\n            setBtnClicked(true);\n            dispatch(registerUserAction(username, name, email, password, passcode));\n        } else {\n            dispatch(showSnackBarAction(\"Please fill all the input fields\"));\n        }\n    }\n\n    return (\n        <>\n            {redirectToLoginPage ? <Redirect to=\"/login\" /> : null}\n\n            <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                <img\n                    className=\"logoImg\"\n                    alt=\"logoImg\"\n                    src={logoImg}\n                />\n                <div className=\"logoTitle\">{PROJECT_NAME}</div>\n\n                <form className=\"formContainer\" onSubmit={handleRegisterBtnClick}>\n                    <input\n                        type=\"text\"\n                        className=\"formInputField\"\n                        placeholder=\"Username\"\n                        autoFocus\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n\n                    <input\n                        type=\"text\"\n                        className=\"formInputField\"\n                        placeholder=\"Name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n\n                    <input\n                        type=\"email\"\n                        className=\"formInputField\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Confirm Password\"\n                        value={confPassword}\n                        onChange={(e) => setConfPassword(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Passcode\"\n                        value={passcode}\n                        maxLength={4}\n                        onChange={(e) => setPasscode(e.target.value)}\n                    />\n\n                    <input\n                        type=\"password\"\n                        className=\"formInputField\"\n                        placeholder=\"Confirm Passcode\"\n                        value={confPasscode}\n                        maxLength={4}\n                        onChange={(e) => setConfPasscode(e.target.value)}\n                    />\n\n                    <ActionButton\n                        dark={false}\n                        showLoader={isRegisteringUser}\n                        buttonText=\"Register\"\n                        onClick={handleRegisterBtnClick}\n                    />\n                </form>\n            </PurpleGradientContainer>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isRegisteringUser: state.isRegisteringUser,\n        isUserRegistered: state.isUserRegistered,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Register);","/Users/mngos/Documents/MNgoChat3Web/src/components/VerifyPasscode.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/HomePageContent.js",["163","164","165","166","167","168","169","170","171","172","173"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport cx from \"classnames\";\n\nimport userIcon from \"../images/user.png\";\nimport allChats from \"../images/allChats.png\";\nimport allUsersIcon from \"../images/allUsers.png\";\nimport logoutIcon from \"../images/logout.png\";\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nimport { BOTTOM_NAV_HEIGHT, BOTTOM_NAV_BOTTOM_MARGIN } from \"../constants\";\nimport { logout } from \"../utils\";\nimport { checkLoginStatusAction } from \"../redux/actions/index\";\nimport {\n    setUserActiveStatus,\n    getUserChatRooms,\n    getAllUsers,\n    removeGetUserChatRoomsFirebaseQuery,\n} from \"../firebaseQueries\";\n\nconst CHATS_TITLE = \"Chats\";\nconst USERS_TITLE = \"Users\";\n\nfunction HomePageContent({\n    isGettingUserAllChats,\n    isGettingAllUsers,\n    allUsers = {},\n    userAllChats = {},\n    userDetails: {\n        username: loggedUsername\n    } = {},\n    history,\n    dispatch,\n}) {\n    const [title, setTitle] = useState(CHATS_TITLE);\n\n    useEffect(() => {\n        getUserChatRooms(dispatch);\n        getAllUsers(dispatch);\n        setUserActiveStatus(true);\n\n        const setActiveStatusInterval = setInterval(function() {\n            setUserActiveStatus(true);\n        }, 10000); //setting user lastActive time every 10 seconds\n        //other users need to compare their local time with that user lastActiveTime to get his active status\n\n        return () => {\n            removeGetUserChatRoomsFirebaseQuery();\n            clearInterval(setActiveStatusInterval);\n        }\n    }, []);\n\n    function hanldeNavBtnClick(type) {\n        if (type === CHATS_TITLE) {\n            setTitle(CHATS_TITLE)\n        } else {\n            setTitle(USERS_TITLE)\n        }\n    }\n\n    function handleUserItemClick(data) {\n        if (!data) return;\n\n        if (title === CHATS_TITLE) {\n            history.push(\"chat/\" + data); //data = chatRoomId\n        } else {\n            const selectedUsername = data.username;\n            const selectedUserToken = data.userToken;\n            if (selectedUsername && selectedUserToken) {\n                for (const chatRoomId in userAllChats) {\n                    const userChatRoom = userAllChats[chatRoomId];\n                    const secondUserToken = userChatRoom.secondUserToken;\n\n                    //if that user is already present in all-chats of loggedUser\n                    //then redirecting him to the chat page of that chatRoomId\n                    if (selectedUserToken.trim() === secondUserToken.trim()) {\n                        history.push(\"chat/\" + chatRoomId);\n                        return;\n                    }\n                }\n\n                // if that user is not present in all-chats of loggedUser\n                // then redirecting him to the new-chat page for that secondUserToken (other userToken)\n                const selectedUserDetails = { name: selectedUsername, token: selectedUserToken };\n                history.push(\"new-chat/\" + JSON.stringify(selectedUserDetails));\n            }\n        }\n    }\n\n    async function handleLogoutBtnClick() {\n        await logout();\n        dispatch(checkLoginStatusAction());\n    }\n\n    function renderAllChats() {\n        // unread msg chatRooms will be listed first\n        const toRender = Object.keys(userAllChats).map(function(chatRoomId) {\n            const userChat = userAllChats[chatRoomId];\n            const unSeenMsgCount = parseInt(userChat.unSeenMsgCount) || 0;\n            const displayName = userChat.displayName;\n\n            if (unSeenMsgCount === 0) return;\n            if (!displayName) return;\n            return (\n                <div\n                    key={chatRoomId}\n                    className={cx(\"listUserItem\", { [\"unSeenMsgUser\"]: unSeenMsgCount > 0 })}\n                    onClick={() => handleUserItemClick(chatRoomId, title)}\n                >\n                    <img alt=\"userIcon\" src={userIcon} />\n                    {displayName}\n                </div>\n            )\n        });\n\n        toRender.push(Object.keys(userAllChats).map(function(chatRoomId) {\n            const userChat = userAllChats[chatRoomId];\n            const unSeenMsgCount = parseInt(userChat.unSeenMsgCount) || 0;\n            const displayName = userChat.displayName;\n\n            if (unSeenMsgCount !== 0) return;\n            if (!displayName) return;\n            return (\n                <div\n                    key={chatRoomId}\n                    className={cx(\"listUserItem\", { [\"unSeenMsgUser\"]: unSeenMsgCount > 0 })}\n                    onClick={() => handleUserItemClick(chatRoomId)}\n                >\n                    <img alt=\"userIcon\" src={userIcon} />\n                    {displayName}\n                </div>\n            )\n        }));\n\n        return toRender;\n    }\n\n    return (\n        <div className=\"homeContainer\">\n            <div\n                className=\"homeContentContainer\"\n                style={{\n                    \"--bottomNavHeight\": BOTTOM_NAV_HEIGHT,\n                    \"--bottomNavMarginBottom\": BOTTOM_NAV_BOTTOM_MARGIN,\n                }}\n            >\n                <div className=\"homeTitle\">\n                    <div className=\"darkTitle\">{title}</div>\n                    <img alt=\"logoutIcon\" src={logoutIcon} onClick={handleLogoutBtnClick} />\n                </div>\n                <div className=\"homeContent\">\n                    {\n                        isGettingUserAllChats || isGettingAllUsers ?\n                            <LoadingAnimation dark loading />\n                            :\n                            <div>\n                                {\n                                    title === CHATS_TITLE ?\n                                        renderAllChats()\n                                        :\n                                        Object.keys(allUsers).map(function(userToken) {\n                                            const user = allUsers[userToken];\n                                            const displayName = user.username;\n\n                                            if (!displayName) return;\n                                            if (displayName !== loggedUsername) {\n                                                return (\n                                                    <div\n                                                        key={userToken}\n                                                        className=\"listUserItem\"\n                                                        onClick={() => handleUserItemClick(user)}\n                                                    >\n                                                        <img alt=\"userIcon\" src={userIcon} />\n                                                        {displayName}\n                                                    </div>\n                                                )\n                                            }\n                                        })\n                                }\n                            </div>\n                    }\n                </div>\n            </div>\n\n            <div\n                className=\"homeBottomNavContainer\"\n                style={{\n                    \"--bottomNavHeight\": BOTTOM_NAV_HEIGHT,\n                    \"--bottomNavMarginBottom\": BOTTOM_NAV_BOTTOM_MARGIN,\n                }}\n            >\n                <img\n                    className={cx(\"bottomTabIcons\", { [\"selectedBottomTabIcon\"]: title === CHATS_TITLE })}\n                    alt=\"allChats\"\n                    src={allChats}\n                    onClick={() => hanldeNavBtnClick(CHATS_TITLE)}\n                />\n\n                <img\n                    className={cx(\"bottomTabIcons\", { [\"selectedBottomTabIcon\"]: title === USERS_TITLE })}\n                    alt=\"allUsers\"\n                    src={allUsersIcon}\n                    onClick={() => hanldeNavBtnClick(USERS_TITLE)}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGettingUserAllChats: state.isGettingUserAllChats,\n        isGettingAllUsers: state.isGettingAllUsers,\n        allUsers: state.allUsers,\n        userAllChats: state.userAllChats,\n        userDetails: state.userDetails,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(HomePageContent);","/Users/mngos/Documents/MNgoChat3Web/src/firebaseQueries.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/FirebaseConfig.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Chat.js",["174","175"],"import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport ChatPageContent from \"../components/ChatPageContent\";\n\nimport {\n    checkLoginStatusAction,\n    getChatRoomDetailsAction\n} from \"../redux/actions/index\";\n\nfunction Chat({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    isGettingChatRoomDetails,\n    isChatRoomDetailsFetched,\n    match: {\n        params: {\n            chatRoomId,\n        } = {}\n    } = {},\n    dispatch,\n}) {\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    //to get chat room details\n    useEffect(() => {\n        if (isSomeoneLoggedIn) {\n            dispatch(getChatRoomDetailsAction(chatRoomId));\n        }\n    }, [isSomeoneLoggedIn]);\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (!isSomeoneLoggedIn) {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToHomeOrLoginPage()}\n\n            {\n                isCheckingLoginStatus || (isGettingChatRoomDetails || !isChatRoomDetailsFetched) ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus || isGettingChatRoomDetails} />\n                    :\n                    <ChatPageContent dispatch={dispatch} chatRoomId={chatRoomId} />\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n        isGettingChatRoomDetails: state.isGettingChatRoomDetails,\n        isChatRoomDetailsFetched: state.isChatRoomDetailsFetched,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Chat);","/Users/mngos/Documents/MNgoChat3Web/src/components/ChatPageContent.js",["176","177","178","179","180","181","182"],"/Users/mngos/Documents/MNgoChat3Web/src/pages/NewChat.js",["183","184","185"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport userIcon from \"../images/user.png\";\nimport LandingPageDesign from \"../components/LandingPageDesign\";\nimport PurpleGradientContainer from \"../components/PurpleGradientContainer\";\nimport ActionButton from \"../components/ActionButton\";\n\nimport { CHAT_ACTION_BOX_HEIGHT } from \"../constants\";\nimport { checkLoginStatusAction, showSnackBarAction } from \"../redux/actions/index\";\nimport { startANewChatRoom } from \"../firebaseQueries\";\n\nfunction NewChat({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    isStartingANewChatRoom,\n    isANewChatRoomStarted,\n    newChatRoomDetails: {\n        chatRoomId,\n    },\n    userDetails: {\n        username: loggedUsername\n    } = {},\n    match: {\n        params: {\n            selectedUserDetails,\n        } = {}\n    } = {},\n    dispatch,\n}) {\n    const [redirectToChat, setRedirectToChat] = useState(false);\n    const [secondUserDetails, setSecondUserDetails] = useState({});\n\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    useEffect(() => {\n        if (isSomeoneLoggedIn) {\n            try {\n                const selectedUserDetailsObj = JSON.parse(selectedUserDetails);\n                const secondUsername = selectedUserDetailsObj.name;\n                const secondUserToken = selectedUserDetailsObj.token;\n                if (secondUsername && secondUserToken) {\n                    setSecondUserDetails({ secondUserToken, secondUsername });\n                } else {\n                    dispatch(showSnackBarAction(\"Invalid user selected\"));\n                }\n            } catch (e) {\n                dispatch(showSnackBarAction(\"Invalid user selected\"));\n            }\n        }\n    }, [isSomeoneLoggedIn]);\n\n    useEffect(() => {\n        if (isANewChatRoomStarted && chatRoomId) {\n            setRedirectToChat(true);\n        }\n    }, [isANewChatRoomStarted]);\n\n    function handleStartBtnClick() {\n        startANewChatRoom({ dispatch, loggedUsername, ...secondUserDetails });\n    }\n\n    function redirectToHomeOrLoginPage() {\n        if (!isCheckingLoginStatus) {\n            if (!isSomeoneLoggedIn) {\n                return <Redirect to=\"/login\" />;\n            }\n        }\n    }\n\n    return (\n        <>\n            {redirectToChat ? <Redirect to={\"/chat/\" + chatRoomId} /> : null}\n            {redirectToHomeOrLoginPage()}\n\n            {\n                (!secondUserDetails.secondUsername) || isCheckingLoginStatus || !isSomeoneLoggedIn ?\n                    <LandingPageDesign isCheckingLoginStatus={isCheckingLoginStatus} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"homeContainer\">\n                        <div\n                            className=\"chatWindow\"\n                            style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                        >\n                            <div className=\"chatTitle\">\n                                <img alt=\"userIcon\" src={userIcon} />\n                                <div>\n                                    <div className=\"lightTitle\">{secondUserDetails.secondUsername}</div>\n                                </div>\n                            </div>\n\n                            <div id=\"chatContent\" className=\"chatContent\"></div>\n                            <div\n                                className=\"chatActionBox\"\n                                style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                            >\n                                <ActionButton\n                                    dark={false}\n                                    showLoader={isStartingANewChatRoom}\n                                    buttonText=\"Start Chat\"\n                                    onClick={handleStartBtnClick}\n                                />\n                            </div>\n                        </div>\n                    </PurpleGradientContainer>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n        isStartingANewChatRoom: state.isStartingANewChatRoom,\n        isANewChatRoomStarted: state.isANewChatRoomStarted,\n        newChatRoomDetails: state.newChatRoomDetails,\n        userDetails: state.userDetails,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(NewChat);","/Users/mngos/Documents/MNgoChat3Web/src/encryptionConstants.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/dayjs.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/ImageViewer.js",["186","187"],"/Users/mngos/Documents/MNgoChat3Web/src/components/ImageWithLoader.js",["188"],"/Users/mngos/Documents/MNgoChat3Web/src/components/OfflineModal.js",["189"],"import React from 'react';\n\nimport warningImg from \"../images/warning.png\";\n\nexport default function OfflineModal() {\n    return (\n        <div className=\"warningModal\">\n            <div className=\"imageViewerBg\" />\n            <img src={warningImg} className=\"imageViewerImg\" />\n            <br />\n            <div className=\"redTitle\">You are not connected to internet</div>\n        </div>\n    );\n}",{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":16,"column":8,"nodeType":"196","endLine":16,"endColumn":10,"suggestions":"197"},{"ruleId":"198","severity":1,"message":"199","line":15,"column":53,"nodeType":"200","messageId":"201","endLine":15,"endColumn":73,"fix":"202"},{"ruleId":"203","severity":1,"message":"204","line":75,"column":24,"nodeType":"205","messageId":"206","endLine":75,"endColumn":25,"suggestions":"207"},{"ruleId":"203","severity":1,"message":"204","line":75,"column":49,"nodeType":"205","messageId":"206","endLine":75,"endColumn":50,"suggestions":"208"},{"ruleId":"194","severity":1,"message":"209","line":48,"column":8,"nodeType":"196","endLine":48,"endColumn":23,"suggestions":"210"},{"ruleId":"194","severity":1,"message":"195","line":30,"column":8,"nodeType":"196","endLine":30,"endColumn":10,"suggestions":"211"},{"ruleId":"194","severity":1,"message":"195","line":22,"column":8,"nodeType":"196","endLine":22,"endColumn":10,"suggestions":"212"},{"ruleId":"198","severity":1,"message":"213","line":18,"column":19,"nodeType":"200","messageId":"201","endLine":18,"endColumn":51,"fix":"214"},{"ruleId":"198","severity":1,"message":"215","line":30,"column":31,"nodeType":"200","messageId":"201","endLine":30,"endColumn":58,"fix":"216"},{"ruleId":"194","severity":1,"message":"217","line":38,"column":8,"nodeType":"196","endLine":38,"endColumn":26,"suggestions":"218"},{"ruleId":"194","severity":1,"message":"219","line":51,"column":8,"nodeType":"196","endLine":51,"endColumn":10,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":102,"column":39,"nodeType":"223","messageId":"224","endLine":102,"endColumn":46},{"ruleId":"221","severity":1,"message":"222","line":103,"column":31,"nodeType":"223","messageId":"224","endLine":103,"endColumn":38},{"ruleId":"198","severity":1,"message":"225","line":107,"column":53,"nodeType":"200","messageId":"201","endLine":107,"endColumn":90,"fix":"226"},{"ruleId":"221","severity":1,"message":"222","line":121,"column":39,"nodeType":"223","messageId":"224","endLine":121,"endColumn":46},{"ruleId":"221","severity":1,"message":"222","line":122,"column":31,"nodeType":"223","messageId":"224","endLine":122,"endColumn":38},{"ruleId":"198","severity":1,"message":"225","line":126,"column":53,"nodeType":"200","messageId":"201","endLine":126,"endColumn":90,"fix":"227"},{"ruleId":"221","severity":1,"message":"228","line":161,"column":67,"nodeType":"229","messageId":"230","endLine":161,"endColumn":75},{"ruleId":"221","severity":1,"message":"222","line":165,"column":63,"nodeType":"223","messageId":"224","endLine":165,"endColumn":70},{"ruleId":"198","severity":1,"message":"231","line":193,"column":55,"nodeType":"200","messageId":"201","endLine":193,"endColumn":103,"fix":"232"},{"ruleId":"198","severity":1,"message":"231","line":200,"column":55,"nodeType":"200","messageId":"201","endLine":200,"endColumn":103,"fix":"233"},{"ruleId":"194","severity":1,"message":"195","line":27,"column":8,"nodeType":"196","endLine":27,"endColumn":10,"suggestions":"234"},{"ruleId":"194","severity":1,"message":"235","line":34,"column":8,"nodeType":"196","endLine":34,"endColumn":27,"suggestions":"236"},{"ruleId":"194","severity":1,"message":"237","line":81,"column":8,"nodeType":"196","endLine":81,"endColumn":10,"suggestions":"238"},{"ruleId":"194","severity":1,"message":"239","line":94,"column":8,"nodeType":"196","endLine":94,"endColumn":23,"suggestions":"240"},{"ruleId":"221","severity":1,"message":"222","line":163,"column":42,"nodeType":"223","messageId":"224","endLine":163,"endColumn":49},{"ruleId":"221","severity":1,"message":"222","line":169,"column":49,"nodeType":"223","messageId":"224","endLine":169,"endColumn":56},{"ruleId":"198","severity":1,"message":"241","line":177,"column":31,"nodeType":"200","messageId":"201","endLine":177,"endColumn":94,"fix":"242"},{"ruleId":"198","severity":1,"message":"243","line":182,"column":35,"nodeType":"200","messageId":"201","endLine":182,"endColumn":89,"fix":"244"},{"ruleId":"198","severity":1,"message":"245","line":183,"column":35,"nodeType":"200","messageId":"201","endLine":183,"endColumn":92,"fix":"246"},{"ruleId":"194","severity":1,"message":"195","line":37,"column":8,"nodeType":"196","endLine":37,"endColumn":10,"suggestions":"247"},{"ruleId":"194","severity":1,"message":"248","line":54,"column":8,"nodeType":"196","endLine":54,"endColumn":27,"suggestions":"249"},{"ruleId":"194","severity":1,"message":"239","line":60,"column":8,"nodeType":"196","endLine":60,"endColumn":31,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":16,"column":13,"nodeType":"253","endLine":16,"endColumn":87},{"ruleId":"251","severity":1,"message":"252","line":18,"column":13,"nodeType":"253","endLine":18,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":15,"column":13,"nodeType":"253","endLine":15,"endColumn":148},{"ruleId":"251","severity":1,"message":"252","line":9,"column":13,"nodeType":"253","endLine":9,"endColumn":64},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["256"],"no-useless-computed-key","Unnecessarily computed property [\"darkLoader\"] found.","Property","unnecessarilyComputedProperty",{"range":"257","text":"258"},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["259","260"],["261","262"],"React Hook useEffect has missing dependencies: 'snackBarMsg' and 'snackBarType'. Either include them or remove the dependency array.",["263"],["264"],["265"],"Unnecessarily computed property [\"darkActionBtnContainer\"] found.",{"range":"266","text":"267"},"Unnecessarily computed property [\"darkActionBtnText\"] found.",{"range":"268","text":"269"},"React Hook useEffect has a missing dependency: 'btnClicked'. Either include it or remove the dependency array.",["270"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["271"],"array-callback-return","Array.prototype.map() expects a return value from function.","ReturnStatement","expectedReturnValue","Unnecessarily computed property [\"unSeenMsgUser\"] found.",{"range":"272","text":"273"},{"range":"274","text":"273"},"Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","Unnecessarily computed property [\"selectedBottomTabIcon\"] found.",{"range":"275","text":"276"},{"range":"277","text":"276"},["278"],"React Hook useEffect has missing dependencies: 'chatRoomId' and 'dispatch'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["279"],"React Hook useEffect has missing dependencies: 'chatRoomId', 'dispatch', and 'userTokenOfSecondUser'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has a missing dependency: 'chatRoomId'. Either include it or remove the dependency array.",["281"],"Unnecessarily computed property [\"myMessageAlignment\"] found.",{"range":"282","text":"283"},"Unnecessarily computed property [\"myMessage\"] found.",{"range":"284","text":"285"},"Unnecessarily computed property [\"theirMessage\"] found.",{"range":"286","text":"287"},["288"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUserDetails'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["289"],["290"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"291","fix":"292"},[351,365],"\"darkLoader\"",{"messageId":"293","fix":"294","desc":"295"},{"messageId":"296","fix":"297","desc":"298"},{"messageId":"293","fix":"299","desc":"295"},{"messageId":"296","fix":"300","desc":"298"},{"desc":"301","fix":"302"},{"desc":"291","fix":"303"},{"desc":"291","fix":"304"},[365,391],"\"darkActionBtnContainer\"",[782,803],"\"darkActionBtnText\"",{"desc":"305","fix":"306"},{"desc":"291","fix":"307"},[3731,3748],"\"unSeenMsgUser\"",[4483,4500],[7420,7445],"\"selectedBottomTabIcon\"",[7705,7730],{"desc":"291","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},[6582,6604],"\"myMessageAlignment\"",[6803,6816],"\"myMessage\"",[6895,6911],"\"theirMessage\"",{"desc":"291","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},"Update the dependencies array to be: [dispatch]",{"range":"320","text":"321"},"removeEscape",{"range":"322","text":"323"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"324","text":"325"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"326","text":"323"},{"range":"327","text":"325"},"Update the dependencies array to be: [snackBarCount, snackBarMsg, snackBarType]",{"range":"328","text":"329"},{"range":"330","text":"321"},{"range":"331","text":"321"},"Update the dependencies array to be: [btnClicked, isUserRegistered]",{"range":"332","text":"333"},{"range":"334","text":"321"},{"range":"335","text":"321"},"Update the dependencies array to be: [chatRoomId, dispatch, isSomeoneLoggedIn]",{"range":"336","text":"337"},"Update the dependencies array to be: [chatRoomId, dispatch, userTokenOfSecondUser]",{"range":"338","text":"339"},"Update the dependencies array to be: [chatRoomId, isANewMessage]",{"range":"340","text":"341"},{"range":"342","text":"321"},"Update the dependencies array to be: [dispatch, isSomeoneLoggedIn, selectedUserDetails]",{"range":"343","text":"344"},"Update the dependencies array to be: [chatRoomId, isANewChatRoomStarted]",{"range":"345","text":"346"},[420,422],"[dispatch]",[1867,1868],"",[1867,1867],"\\",[1892,1893],[1892,1892],[1245,1260],"[snackBarCount, snackBarMsg, snackBarType]",[888,890],[682,684],[1243,1261],"[btnClicked, isUserRegistered]",[1559,1561],[654,656],[823,842],"[chatRoomId, dispatch, isSomeoneLoggedIn]",[3278,3280],"[chatRoomId, dispatch, userTokenOfSecondUser]",[3650,3665],"[chatRoomId, isANewMessage]",[1133,1135],[1812,1831],"[dispatch, isSomeoneLoggedIn, selectedUserDetails]",[1962,1985],"[chatRoomId, isANewChatRoomStarted]"]