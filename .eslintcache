[{"/Users/mngos/Documents/MNgoChat3Web/src/index.js":"1","/Users/mngos/Documents/MNgoChat3Web/src/App.js":"2","/Users/mngos/Documents/MNgoChat3Web/src/Routes.js":"3","/Users/mngos/Documents/MNgoChat3Web/src/pages/NotFound.js":"4","/Users/mngos/Documents/MNgoChat3Web/src/redux/store.js":"5","/Users/mngos/Documents/MNgoChat3Web/src/redux/reducers/rootReducer.js":"6","/Users/mngos/Documents/MNgoChat3Web/src/pages/Landing.js":"7","/Users/mngos/Documents/MNgoChat3Web/src/components/LoadingAnimation.js":"8","/Users/mngos/Documents/MNgoChat3Web/src/utils.js":"9","/Users/mngos/Documents/MNgoChat3Web/src/constants.js":"10","/Users/mngos/Documents/MNgoChat3Web/src/redux/actions/index.js":"11","/Users/mngos/Documents/MNgoChat3Web/src/apis.js":"12","/Users/mngos/Documents/MNgoChat3Web/src/components/PurpleGradientContainer.js":"13","/Users/mngos/Documents/MNgoChat3Web/src/components/GreyGradientContainer.js":"14","/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBar.js":"15","/Users/mngos/Documents/MNgoChat3Web/src/pages/Login.js":"16","/Users/mngos/Documents/MNgoChat3Web/src/pages/Home.js":"17","/Users/mngos/Documents/MNgoChat3Web/src/components/ActionButton.js":"18","/Users/mngos/Documents/MNgoChat3Web/src/components/SignInUpButton.js":"19","/Users/mngos/Documents/MNgoChat3Web/src/components/LandingPageDesign.js":"20","/Users/mngos/Documents/MNgoChat3Web/src/pages/Register.js":"21","/Users/mngos/Documents/MNgoChat3Web/src/components/VerifyPasscode.js":"22","/Users/mngos/Documents/MNgoChat3Web/src/components/HomePageContent.js":"23","/Users/mngos/Documents/MNgoChat3Web/src/firebaseQueries.js":"24","/Users/mngos/Documents/MNgoChat3Web/src/pages/Chat.js":"25","/Users/mngos/Documents/MNgoChat3Web/src/components/ChatPageContent.js":"26","/Users/mngos/Documents/MNgoChat3Web/src/pages/NewChat.js":"27","/Users/mngos/Documents/MNgoChat3Web/src/dayjs.js":"28","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageViewer.js":"29","/Users/mngos/Documents/MNgoChat3Web/src/components/ImageWithLoader.js":"30","/Users/mngos/Documents/MNgoChat3Web/src/components/OfflineModal.js":"31","/Users/mngos/Documents/MNgoChat3Web/src/components/MessageItem.js":"32","/Users/mngos/Documents/MNgoChat3Web/src/RootWrapper.js":"33","/Users/mngos/Documents/MNgoChat3Web/src/FirebaseConfig.js":"34","/Users/mngos/Documents/MNgoChat3Web/src/encryptionConstants.js":"35"},{"size":176,"mtime":1614223195079,"results":"36","hashOfConfig":"37"},{"size":367,"mtime":1614223195075,"results":"38","hashOfConfig":"37"},{"size":991,"mtime":1614223195075,"results":"39","hashOfConfig":"37"},{"size":127,"mtime":1614223195080,"results":"40","hashOfConfig":"37"},{"size":229,"mtime":1614223195081,"results":"41","hashOfConfig":"37"},{"size":12388,"mtime":1614265673526,"results":"42","hashOfConfig":"37"},{"size":554,"mtime":1614223195080,"results":"43","hashOfConfig":"37"},{"size":494,"mtime":1614223195077,"results":"44","hashOfConfig":"37"},{"size":4758,"mtime":1614223195082,"results":"45","hashOfConfig":"37"},{"size":1862,"mtime":1614223195077,"results":"46","hashOfConfig":"37"},{"size":9459,"mtime":1614265657789,"results":"47","hashOfConfig":"37"},{"size":1234,"mtime":1614223195076,"results":"48","hashOfConfig":"37"},{"size":575,"mtime":1614223195077,"results":"49","hashOfConfig":"37"},{"size":625,"mtime":1614223195076,"results":"50","hashOfConfig":"37"},{"size":997,"mtime":1614223195077,"results":"51","hashOfConfig":"37"},{"size":2720,"mtime":1614223195080,"results":"52","hashOfConfig":"37"},{"size":1152,"mtime":1614255556438,"results":"53","hashOfConfig":"37"},{"size":1008,"mtime":1614223195076,"results":"54","hashOfConfig":"37"},{"size":447,"mtime":1614223195077,"results":"55","hashOfConfig":"37"},{"size":1333,"mtime":1614223195076,"results":"56","hashOfConfig":"37"},{"size":5671,"mtime":1614223195080,"results":"57","hashOfConfig":"37"},{"size":1737,"mtime":1614223195077,"results":"58","hashOfConfig":"37"},{"size":16579,"mtime":1614262264497,"results":"59","hashOfConfig":"37"},{"size":16096,"mtime":1614265649147,"results":"60","hashOfConfig":"37"},{"size":1465,"mtime":1614229457896,"results":"61","hashOfConfig":"37"},{"size":15097,"mtime":1614265780523,"results":"62","hashOfConfig":"37"},{"size":4098,"mtime":1614223195080,"results":"63","hashOfConfig":"37"},{"size":96,"mtime":1614223195078,"results":"64","hashOfConfig":"37"},{"size":697,"mtime":1614262681880,"results":"65","hashOfConfig":"37"},{"size":765,"mtime":1614260294192,"results":"66","hashOfConfig":"37"},{"size":400,"mtime":1614223195077,"results":"67","hashOfConfig":"37"},{"size":4041,"mtime":1614223195077,"results":"68","hashOfConfig":"37"},{"size":5100,"mtime":1614223195075,"results":"69","hashOfConfig":"37"},{"size":539,"mtime":1614223301273,"results":"70","hashOfConfig":"37"},{"size":48,"mtime":1614223312282,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1v2xoz5",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":5,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"145","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/mngos/Documents/MNgoChat3Web/src/index.js",[],["153","154"],"/Users/mngos/Documents/MNgoChat3Web/src/App.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/Routes.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/NotFound.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/store.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/reducers/rootReducer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Landing.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/LoadingAnimation.js",["155"],"import React from \"react\";\nimport cx from \"classnames\";\n\nimport loaderImg from '../images/loader.gif';\n\nexport default function LoadingAnimation({\n    dark,\n    loading,\n    className,\n    loaderClassName,\n}) {\n    return loading ? (\n        <center className={className}>\n            <img\n                alt=\"loading\"\n                className={cx(\"loadingAnimation\", { [\"darkLoader\"]: dark }, loaderClassName)}\n                src={loaderImg}\n            />\n        </center>\n    ) : null;\n}","/Users/mngos/Documents/MNgoChat3Web/src/utils.js",["156","157"],"import { enc, AES } from \"crypto-js\";\nimport { Redirect } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\";\n\nimport { ENCRYPTION_KEY } from \"./encryptionConstants\";\nimport { COOKIE_EXPIRATION_TIME, LOGGED_USER_TOKEN_COOKIE_NAME, AUTH_API_URL_ADDRESS, NO_INTERNET_ERROR } from \"./constants\";\nconst cookies = new Cookies();\n\nexport function getCookieValue(cookie_name) {\n    let value = null;\n    try {\n        const cookieValue = cookies.get(cookie_name);\n        if (cookieValue) {\n            value = cookieValue;\n        }\n    } catch {\n        value = null;\n    }\n\n    return value;\n}\n\nexport function makeCookie(key, value) {\n    try {\n        cookies.set(key, value, { path: \"/\", expires: COOKIE_EXPIRATION_TIME, });\n\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport function encryptText(text) {\n    try {\n        const encryptedValue = AES.encrypt(text, ENCRYPTION_KEY).toString();\n        return encryptedValue;\n    } catch {\n        return null;\n    }\n}\n\nexport function decryptText(enryptedValue) {\n    let value = null;\n    try {\n        const decrypted = AES.decrypt(enryptedValue, ENCRYPTION_KEY);\n        value = enc.Utf8.stringify(decrypted);\n    } catch {\n        return null;\n    }\n\n    return value;\n}\n\nexport async function sendRequestToAPI(endpoint, body) {\n    try {\n        const requestAddress = AUTH_API_URL_ADDRESS + endpoint;\n        const response = await fetch(requestAddress, {\n            method: \"post\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        });\n        return await response.json();\n    } catch {\n        return NO_INTERNET_ERROR;\n    }\n}\n\nexport function validateUsername(name) {\n    var re = /^[a-zA-Z0-9_]*$/;\n    return re.test(name);\n}\n\nexport function validateName(name) {\n    var re = /^[a-zA-Z0-9 ]*$/;\n    return re.test(name);\n}\n\nexport function validateEmail(email) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nexport function validateNumber(number) {\n    var re = /^[0-9]*$/;\n    return re.test(number);\n}\n\nexport function getLoggedUserToken() {\n    return getCookieValue(LOGGED_USER_TOKEN_COOKIE_NAME);\n}\n\nexport function getUserTokenOfTheSecondUser(members) {\n    if (!members) {\n        return null\n    }\n    let userTokenOfSecondUser = null;\n\n    const loggedUserToken = getLoggedUserToken();\n    if (Object.keys(members).length === 2) {\n        try {\n            for (const userToken in members) {\n                if (userToken !== loggedUserToken) {\n                    userTokenOfSecondUser = userToken;\n                    break;\n                }\n            }\n        } catch { }\n    }\n\n    return userTokenOfSecondUser;\n}\n\nexport function getUsernameOfTheSecondUser(members) {\n    if (!members) {\n        return null\n    }\n    let usernameOfSecondUser = null;\n\n    const loggedUserToken = getLoggedUserToken();\n    if (Object.keys(members).length === 2) {\n        try {\n            for (const userToken in members) {\n                if (userToken !== loggedUserToken) {\n                    usernameOfSecondUser = members[userToken].name;\n                    break;\n                }\n            }\n        } catch { }\n    }\n\n    return usernameOfSecondUser;\n}\n\nexport function isEmpty(obj) {\n\n    // null and undefined are \"empty\"\n    if (obj == null) return true;\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length > 0) return false;\n    if (obj.length === 0) return true;\n\n    // If it isn't an object at this point\n    // it is empty, but it can't be anything *but* empty\n    // Is it empty?  Depends on your application.\n    if (typeof obj !== \"object\") return true;\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE < 9\n    for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n}\n\nexport function redirectToHomeOrLoginPage(isCheckingLoginStatus, isSomeoneLoggedIn) {\n    if (!isCheckingLoginStatus) {\n        if (isSomeoneLoggedIn) {\n            return <Redirect to=\"/home\" />;\n        } else {\n            return <Redirect to=\"/login\" />;\n        }\n    }\n}\n\nexport function redirectToLoginPage(isCheckingLoginStatus, isSomeoneLoggedIn) {\n    if (!isCheckingLoginStatus) {\n        if (!isSomeoneLoggedIn) {\n            return <Redirect to=\"/login\" />;\n        }\n    }\n}\n\nexport async function logout(dispatch) {\n    await cookies.remove(LOGGED_USER_TOKEN_COOKIE_NAME, { path: \"/\", expires: COOKIE_EXPIRATION_TIME });\n};","/Users/mngos/Documents/MNgoChat3Web/src/constants.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/redux/actions/index.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/apis.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/PurpleGradientContainer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/GreyGradientContainer.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/SnackBar.js",["158"],"import React, { useEffect } from \"react\";\nimport cx from \"classnames\";\n\nexport default function SnackBar({\n    open,\n    duration = 5000,\n    type = \"error\",\n    msg,\n    boxclassName,\n    textclassName,\n    handleClose,\n}) {\n    useEffect(() => {\n        setTimeout(function() {\n            console.log(\"hiding snack bar in 5 s\");\n            handleClose();\n        }, duration);\n    }, [msg])\n\n    function renderTypeStyle(type) {\n        if (type === \"error\") {\n            return \"errorBox\";\n        } else if (type === \"success\") {\n            return \"successBox\";\n        } else if (type === \"info\") {\n            return \"infoBox\";\n        }\n\n        return \"\";\n    }\n\n    return (\n        open ?\n            <div className=\"snackBarContainer\">\n                <div className={cx(\"snackBarContent\", renderTypeStyle(type), boxclassName)}>\n                    <span className={cx(\"snackBarText\", textclassName)}>{msg}</span>\n                </div>\n            </div>\n            : null\n    )\n}","/Users/mngos/Documents/MNgoChat3Web/src/pages/Login.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Home.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/ActionButton.js",["159","160"],"import React from 'react';\nimport cx from \"classnames\";\n\nimport LoadingAnimation from \"./LoadingAnimation\";\n\nexport default function ActionButton({\n    dark,\n    className,\n    textclassName,\n    showLoader,\n    buttonText = \"Button\",\n    onClick,\n}) {\n    return (\n        <button\n            className={cx(\n                \"actionBtnContainer\",\n                { [\"darkActionBtnContainer\"]: dark },\n                className\n            )}\n            onClick={!showLoader ? onClick : null}\n        >\n            {\n                showLoader ?\n                    <LoadingAnimation dark={!dark} loading={showLoader} />\n                    :\n                    <div\n                        className={cx(\n                            \"actionBtnText\",\n                            { [\"darkActionBtnText\"]: dark },\n                            textclassName\n                        )}\n                    >\n                        {buttonText}\n                    </div>\n            }\n        </button>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/SignInUpButton.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/LandingPageDesign.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Register.js",["161"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport logoImg from \"../images/logo.png\";\nimport ActionButton from \"../components/ActionButton\";\n\nimport { PROJECT_NAME } from \"../constants\";\nimport {\n    validateUsername,\n    validateName,\n    validateEmail,\n    validateNumber,\n} from \"../utils\";\nimport { showSnackBarAction, registerUserAction } from \"../redux/actions/index\";\n\nfunction Register({\n    isRegisteringUser,\n    isUserRegistered,\n    dispatch,\n}) {\n    const [username, setUsername] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confPassword, setConfPassword] = useState(\"\");\n    const [passcode, setPasscode] = useState(\"\");\n    const [confPasscode, setConfPasscode] = useState(\"\");\n\n    const [redirectToLoginPage, setRedirectToLoginPage] = useState(false);\n    const [btnClicked, setBtnClicked] = useState(false);\n\n    useEffect(() => {\n        if (isUserRegistered && btnClicked) {\n            setRedirectToLoginPage(true);\n        }\n    }, [isUserRegistered]);\n\n    function handleRegisterBtnClick(e) {\n        e.preventDefault();\n\n        if (isRegisteringUser) {\n            return;\n        }\n\n        if (username !== \"\" && name !== \"\" && email !== \"\" && password !== \"\" && confPassword !== \"\" && passcode !== \"\" && confPasscode !== \"\") {\n            if (!validateUsername(username)) {\n                dispatch(showSnackBarAction(\"Username cannot contain symbol and spaces\"));\n                return;\n            }\n            if (!validateName(name)) {\n                dispatch(showSnackBarAction(\"Name cannot contain symbol and spaces\"));\n                return;\n            }\n            if (!validateEmail(email)) {\n                dispatch(showSnackBarAction(\"Invalid Email id format\"));\n                return;\n            }\n            if (password !== confPassword) {\n                dispatch(showSnackBarAction(\"Password do not match\"));\n                return;\n            }\n            if (!validateNumber(passcode)) {\n                dispatch(showSnackBarAction(\"Passcode must be a number\"));\n                return;\n            }\n            if (passcode.length !== 4) {\n                dispatch(showSnackBarAction(\"Passcode must be 4 digits long\"));\n                return;\n            }\n            if (passcode !== confPasscode) {\n                dispatch(showSnackBarAction(\"Passcode do not match\"));\n                return;\n            }\n\n            setBtnClicked(true);\n            dispatch(registerUserAction(username, name, email, password, passcode));\n        } else {\n            dispatch(showSnackBarAction(\"Please fill all the input fields\"));\n        }\n    }\n\n    return (\n        <>\n            {redirectToLoginPage ? <Redirect to=\"/login\" /> : null}\n\n            <img\n                className=\"logoImg\"\n                alt=\"logoImg\"\n                src={logoImg}\n            />\n            <div className=\"logoTitle\">{PROJECT_NAME}</div>\n\n            <form className=\"formContainer\" onSubmit={handleRegisterBtnClick}>\n                <input\n                    type=\"text\"\n                    className=\"formInputField\"\n                    placeholder=\"Username\"\n                    autoFocus\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                />\n\n                <input\n                    type=\"text\"\n                    className=\"formInputField\"\n                    placeholder=\"Name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                />\n\n                <input\n                    type=\"email\"\n                    className=\"formInputField\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                />\n\n                <input\n                    type=\"password\"\n                    className=\"formInputField\"\n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n\n                <input\n                    type=\"password\"\n                    className=\"formInputField\"\n                    placeholder=\"Confirm Password\"\n                    value={confPassword}\n                    onChange={(e) => setConfPassword(e.target.value)}\n                />\n\n                <input\n                    type=\"password\"\n                    className=\"formInputField\"\n                    placeholder=\"Passcode\"\n                    value={passcode}\n                    maxLength={4}\n                    onChange={(e) => setPasscode(e.target.value)}\n                />\n\n                <input\n                    type=\"password\"\n                    className=\"formInputField\"\n                    placeholder=\"Confirm Passcode\"\n                    value={confPasscode}\n                    maxLength={4}\n                    onChange={(e) => setConfPasscode(e.target.value)}\n                />\n\n                <ActionButton\n                    dark={false}\n                    showLoader={isRegisteringUser}\n                    buttonText=\"Register\"\n                    onClick={handleRegisterBtnClick}\n                />\n            </form>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isRegisteringUser: state.isRegisteringUser,\n        isUserRegistered: state.isUserRegistered,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Register);","/Users/mngos/Documents/MNgoChat3Web/src/components/VerifyPasscode.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/HomePageContent.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177"],"/Users/mngos/Documents/MNgoChat3Web/src/firebaseQueries.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/pages/Chat.js",["178"],"import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\n\nimport LoadingAnimation from \"../components/LoadingAnimation\";\nimport ChatPageContent from \"../components/ChatPageContent\";\n\nimport { getChatRoomDetailsAction } from \"../redux/actions/index\";\nimport { redirectToLoginPage } from \"../utils\";\n\nfunction Chat({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    isGettingChatRoomDetails,\n    isChatRoomDetailsFetched,\n    match: {\n        params: {\n            chatRoomId,\n        } = {}\n    } = {},\n    dispatch,\n}) {\n    useEffect(() => {\n        if (isSomeoneLoggedIn) {\n            dispatch(getChatRoomDetailsAction(chatRoomId));\n        }\n    }, [isSomeoneLoggedIn]);\n\n    return (\n        <>\n            {redirectToLoginPage(isCheckingLoginStatus, isSomeoneLoggedIn)}\n\n            {\n                !isSomeoneLoggedIn || isGettingChatRoomDetails || !isChatRoomDetailsFetched ?\n                    <LoadingAnimation loading />\n                    :\n                    <ChatPageContent dispatch={dispatch} chatRoomId={chatRoomId} />\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n        isGettingChatRoomDetails: state.isGettingChatRoomDetails,\n        isChatRoomDetailsFetched: state.isChatRoomDetailsFetched,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Chat);","/Users/mngos/Documents/MNgoChat3Web/src/components/ChatPageContent.js",["179","180","181","182"],"/Users/mngos/Documents/MNgoChat3Web/src/pages/NewChat.js",["183","184"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport userIcon from \"../images/user.png\";\nimport LoadingAnimation from \"../components/LoadingAnimation\";\nimport ActionButton from \"../components/ActionButton\";\n\nimport { CHAT_ACTION_BOX_HEIGHT } from \"../constants\";\nimport { showSnackBarAction } from \"../redux/actions/index\";\nimport { startANewChatRoom } from \"../firebaseQueries\";\nimport { redirectToLoginPage } from \"../utils\";\n\nfunction NewChat({\n    isCheckingLoginStatus,\n    isSomeoneLoggedIn,\n    isStartingANewChatRoom,\n    isANewChatRoomStarted,\n    newChatRoomDetails: {\n        chatRoomId,\n    },\n    userDetails: {\n        username: loggedUsername\n    } = {},\n    match: {\n        params: {\n            selectedUserDetails,\n        } = {}\n    } = {},\n    dispatch,\n}) {\n    const [redirectToChat, setRedirectToChat] = useState(false);\n    const [secondUserDetails, setSecondUserDetails] = useState({});\n\n    useEffect(() => {\n        if (isSomeoneLoggedIn) {\n            try {\n                const selectedUserDetailsObj = JSON.parse(selectedUserDetails);\n                const secondUsername = selectedUserDetailsObj.name;\n                const secondUserToken = selectedUserDetailsObj.token;\n                if (secondUsername && secondUserToken) {\n                    setSecondUserDetails({ secondUserToken, secondUsername });\n                } else {\n                    dispatch(showSnackBarAction(\"Invalid user selected\"));\n                }\n            } catch (e) {\n                dispatch(showSnackBarAction(\"Invalid user selected\"));\n            }\n        }\n    }, [isSomeoneLoggedIn]);\n\n    useEffect(() => {\n        if (isANewChatRoomStarted && chatRoomId) {\n            setRedirectToChat(true);\n        }\n    }, [isANewChatRoomStarted]);\n\n    function handleStartBtnClick() {\n        startANewChatRoom({ dispatch, loggedUsername, ...secondUserDetails });\n    }\n\n    return (\n        <>\n            {redirectToChat ? <Redirect to={\"/chat/\" + chatRoomId} /> : null}\n            {redirectToLoginPage(isCheckingLoginStatus, isSomeoneLoggedIn)}\n\n            {\n                (!secondUserDetails.secondUsername) || !isSomeoneLoggedIn ?\n                    <LoadingAnimation loading />\n                    :\n                    <div className=\"homeContainer\">\n                        <div\n                            className=\"chatWindow\"\n                            style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                        >\n                            <div className=\"chatTitle\">\n                                <img alt=\"userIcon\" src={userIcon} />\n                                <div>\n                                    <div className=\"lightTitle\">{secondUserDetails.secondUsername}</div>\n                                </div>\n                            </div>\n\n                            <div id=\"chatContent\" className=\"chatContent\"></div>\n                            <div\n                                className=\"chatActionBox\"\n                                style={{ \"--actionBoxHeight\": CHAT_ACTION_BOX_HEIGHT }}\n                            >\n                                <ActionButton\n                                    dark={false}\n                                    showLoader={isStartingANewChatRoom}\n                                    buttonText=\"Start Chat\"\n                                    onClick={handleStartBtnClick}\n                                />\n                            </div>\n                        </div>\n                    </div>\n            }\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n        isSomeoneLoggedIn: state.isSomeoneLoggedIn,\n        isStartingANewChatRoom: state.isStartingANewChatRoom,\n        isANewChatRoomStarted: state.isANewChatRoomStarted,\n        newChatRoomDetails: state.newChatRoomDetails,\n        userDetails: state.userDetails,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(NewChat);","/Users/mngos/Documents/MNgoChat3Web/src/dayjs.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/components/ImageViewer.js",["185","186"],"/Users/mngos/Documents/MNgoChat3Web/src/components/ImageWithLoader.js",["187"],"/Users/mngos/Documents/MNgoChat3Web/src/components/OfflineModal.js",["188"],"import React from 'react';\n\nimport warningImg from \"../images/warning.png\";\n\nexport default function OfflineModal() {\n    return (\n        <div className=\"warningModal\">\n            <div className=\"imageViewerBg\" />\n            <img src={warningImg} className=\"imageViewerImg\" />\n            <br />\n            <div className=\"redTitle\">You are not connected to internet</div>\n        </div>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/components/MessageItem.js",["189","190","191","192","193"],"import React, { useRef, useEffect } from 'react';\nimport ReactTextFormat from 'react-text-format';\nimport cx from \"classnames\";\n\nimport replyIcon from \"../images/reply.png\";\nimport ImageWithLoader from \"./ImageWithLoader\";\n\nimport { MSG_TYPE_IMAGE, MSG_TYPE_REPLY } from \"../constants\";\n\nexport default function MessageItem({\n    loggedUserToken,\n    formattedTime,\n    msgIdToScrollTo,\n    msg,\n    onImageClick,\n    onReplyIconClick,\n    onOriginalMsgClick,\n}) {\n    const msgRef = useRef(null);\n\n    const type = msg.type;\n    const message = msg.message;\n    const originalMessage = msg.originalMessage;\n    const originalMessageType = msg.originalMessageType;\n    const isMineMsg = msg.sentByUserToken === loggedUserToken;\n\n    useEffect(() => {\n        if (msgIdToScrollTo === msg.messageId) {\n            msgRef.current && msgRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n        }\n    }, [msgIdToScrollTo, msg.messageId]);\n\n    function customLinkDecorator(decoratedHref, decoratedText, linkTarget, key) {\n        return (\n            <a\n                key={key}\n                href={decoratedHref}\n                target=\"_blank\"\n                rel='noreferrer'\n                className='messageItemLink'\n            >\n                {decoratedText}\n            </a>\n        )\n    }\n\n    function customPhoneDecorator(decoratedText, key) {\n        return (\n            <a\n                key={key}\n                href={\"tel:\" + decoratedText}\n                target=\"_blank\"\n                rel='noreferrer'\n                className='messageItemLink'\n            >\n                {decoratedText}\n            </a>\n        )\n    }\n\n    return (\n        <div className={\"messageContainer\"} ref={msgRef}>\n            <div className={cx(\"message\", { [\"myMessageAlignment\"]: msg.sentByUserToken === loggedUserToken })}>\n                <div className={cx({ [\"myMessage\"]: isMineMsg }, { [\"theirMessage\"]: !isMineMsg })}>\n                    {\n                        type === MSG_TYPE_REPLY ?\n                            <div className=\"replyMessageItem\" onClick={() => onOriginalMsgClick(msg.originalMessageId)}>\n                                {\n                                    originalMessageType === MSG_TYPE_IMAGE ?\n                                        <ImageWithLoader\n                                            src={originalMessage}\n                                            className=\"messageImg\"\n                                            onClick={(event) => onImageClick(event, originalMessage)}\n                                        />\n                                        : originalMessage\n                                }\n                            </div>\n                            : null\n                    }\n                    {\n                        type === MSG_TYPE_IMAGE ?\n                            <ImageWithLoader\n                                src={message}\n                                className=\"messageImg\"\n                                onClick={(event) => onImageClick(event, message)}\n                            />\n                            :\n                            <ReactTextFormat\n                                allowedFormats={['URL', 'Email', 'Phone']}\n                                linkDecorator={customLinkDecorator}\n                                emailDecorator={customLinkDecorator}\n                                phoneDecorator={customPhoneDecorator}\n                            >\n                                {message}\n                            </ReactTextFormat>\n                    }\n                    <img\n                        alt=\"replyIcon\"\n                        className={cx({ [\"myReplyIcon\"]: isMineMsg }, { [\"theirReplyIcon\"]: !isMineMsg })}\n                        src={replyIcon}\n                        onClick={(event) => onReplyIconClick(event, msg)}\n                    />\n                </div>\n            </div>\n            <div className=\"messageTime\">{formattedTime}</div>\n        </div>\n    );\n}","/Users/mngos/Documents/MNgoChat3Web/src/RootWrapper.js",["194","195"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport SnackBar from \"./components/SnackBar\";\nimport OfflineModal from \"./components/OfflineModal\";\nimport PurpleGradientContainer from \"./components/PurpleGradientContainer\";\nimport LandingPageDesign from \"./components/LandingPageDesign\";\n\nimport { checkLoginStatusAction } from \"./redux/actions/index\";\n\nfunction RootWrapper({\n    isCheckingLoginStatus,\n\n    snackBarCount,\n    snackBarMsg,\n    snackBarType,\n\n    checkLoginStatusError,\n    loginUserError,\n\n    isUserRegistered,\n    registerUserError,\n\n    verifyPasscodeError,\n    getUserAllChatsError,\n    getAllUsersError,\n    getChatRoomDetailsError,\n    startNewChatRoomError,\n    uploadImageError,\n\n    children,\n\n    dispatch,\n}) {\n    const [showOfflineWarning, setShowOffLineWarning] = useState(false);\n    const [snackBarVisible, setSnackBarVisible] = useState(false);\n    const [snackBarMsgState, setSnackBarMsgState] = useState(\"\");\n    const [snackBarTypeState, setSnackBarTypeState] = useState(\"success\")\n\n    useEffect(() => {\n        window.addEventListener('offline', function(e) {\n            setShowOffLineWarning(true);\n        });\n\n        window.addEventListener('online', function(e) {\n            setShowOffLineWarning(false);\n        });\n    }, []);\n\n    useEffect(() => {\n        dispatch(checkLoginStatusAction());\n    }, []);\n\n    useEffect(() => {\n        if (snackBarMsg) {\n            makeSnackBar(snackBarMsg, snackBarType);\n        }\n    }, [snackBarCount]);\n\n    useEffect(() => {\n        if (checkLoginStatusError) {\n            makeSnackBar(checkLoginStatusError);\n        }\n    }, [checkLoginStatusError]);\n\n    useEffect(() => {\n        if (loginUserError) {\n            makeSnackBar(loginUserError);\n        }\n    }, [loginUserError]);\n\n    useEffect(() => {\n        if (registerUserError) {\n            makeSnackBar(registerUserError);\n        }\n    }, [registerUserError]);\n\n    useEffect(() => {\n        if (isUserRegistered) {\n            makeSnackBar(\"Successfully registered. Please login to continue\", \"success\");\n        }\n    }, [isUserRegistered]);\n\n    useEffect(() => {\n        if (verifyPasscodeError) {\n            makeSnackBar(verifyPasscodeError);\n        }\n    }, [verifyPasscodeError]);\n\n    useEffect(() => {\n        if (getUserAllChatsError) {\n            makeSnackBar(getUserAllChatsError);\n        }\n    }, [getUserAllChatsError]);\n\n    useEffect(() => {\n        if (getUserAllChatsError) {\n            makeSnackBar(getUserAllChatsError);\n        }\n    }, [getUserAllChatsError]);\n\n    useEffect(() => {\n        if (getAllUsersError) {\n            makeSnackBar(getAllUsersError);\n        }\n    }, [getAllUsersError]);\n\n    useEffect(() => {\n        if (getChatRoomDetailsError) {\n            makeSnackBar(getChatRoomDetailsError);\n        }\n    }, [getChatRoomDetailsError]);\n\n    useEffect(() => {\n        if (startNewChatRoomError) {\n            makeSnackBar(startNewChatRoomError);\n        }\n    }, [startNewChatRoomError]);\n\n    useEffect(() => {\n        if (uploadImageError) {\n            makeSnackBar(uploadImageError);\n        }\n    }, [uploadImageError]);\n\n    function makeSnackBar(msg, type) {\n        setSnackBarMsgState(msg);\n        setSnackBarTypeState(type);\n        setSnackBarVisible(true);\n    }\n\n    function handleSnackBarClose() {\n        setSnackBarVisible(false);\n    }\n\n    return (\n        <>\n            {\n                showOfflineWarning ?\n                    <OfflineModal />\n                    : null\n            }\n\n            {\n                isCheckingLoginStatus ?\n                    <LandingPageDesign isCheckingLoginStatus={true} />\n                    :\n                    <PurpleGradientContainer childrenClassName=\"flexCenter\">\n                        {children}\n                    </PurpleGradientContainer>\n            }\n\n            {\n                snackBarVisible ?\n                    <SnackBar\n                        open={snackBarVisible}\n                        msg={snackBarMsgState}\n                        type={snackBarTypeState}\n                        handleClose={handleSnackBarClose}\n                    />\n                    : null\n            }\n\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isCheckingLoginStatus: state.isCheckingLoginStatus,\n\n        snackBarCount: state.snackBarCount,\n        snackBarMsg: state.snackBarMsg,\n        snackBarType: state.snackBarType,\n\n        checkLoginStatusError: state.checkLoginStatusError,\n        loginUserError: state.loginUserError,\n\n        isUserRegistered: state.isUserRegistered,\n        registerUserError: state.registerUserError,\n\n        verifyPasscodeError: state.verifyPasscodeError,\n        getUserAllChatsError: state.getUserAllChatsError,\n        getAllUsersError: state.getAllUsersError,\n        getChatRoomDetailsError: state.getChatRoomDetailsError,\n        startNewChatRoomError: state.startNewChatRoomError,\n        uploadImageError: state.uploadImageError,\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(RootWrapper);","/Users/mngos/Documents/MNgoChat3Web/src/FirebaseConfig.js",[],"/Users/mngos/Documents/MNgoChat3Web/src/encryptionConstants.js",[],{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":16,"column":53,"nodeType":"202","messageId":"203","endLine":16,"endColumn":73,"fix":"204"},{"ruleId":"205","severity":1,"message":"206","line":79,"column":24,"nodeType":"207","messageId":"208","endLine":79,"endColumn":25,"suggestions":"209"},{"ruleId":"205","severity":1,"message":"206","line":79,"column":49,"nodeType":"207","messageId":"208","endLine":79,"endColumn":50,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":18,"column":8,"nodeType":"213","endLine":18,"endColumn":13,"suggestions":"214"},{"ruleId":"200","severity":1,"message":"215","line":18,"column":19,"nodeType":"202","messageId":"203","endLine":18,"endColumn":51,"fix":"216"},{"ruleId":"200","severity":1,"message":"217","line":30,"column":31,"nodeType":"202","messageId":"203","endLine":30,"endColumn":58,"fix":"218"},{"ruleId":"211","severity":1,"message":"219","line":37,"column":8,"nodeType":"213","endLine":37,"endColumn":26,"suggestions":"220"},{"ruleId":"211","severity":1,"message":"221","line":65,"column":8,"nodeType":"213","endLine":65,"endColumn":10,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":70,"column":39,"nodeType":"225","messageId":"226","endLine":70,"endColumn":47},{"ruleId":"223","severity":1,"message":"224","line":180,"column":39,"nodeType":"227","messageId":"228","endLine":180,"endColumn":46},{"ruleId":"223","severity":1,"message":"224","line":181,"column":31,"nodeType":"227","messageId":"228","endLine":181,"endColumn":38},{"ruleId":"200","severity":1,"message":"229","line":185,"column":53,"nodeType":"202","messageId":"203","endLine":185,"endColumn":90,"fix":"230"},{"ruleId":"223","severity":1,"message":"224","line":200,"column":39,"nodeType":"227","messageId":"228","endLine":200,"endColumn":46},{"ruleId":"223","severity":1,"message":"224","line":201,"column":31,"nodeType":"227","messageId":"228","endLine":201,"endColumn":38},{"ruleId":"200","severity":1,"message":"229","line":205,"column":53,"nodeType":"202","messageId":"203","endLine":205,"endColumn":90,"fix":"231"},{"ruleId":"232","severity":1,"message":"233","line":221,"column":17,"nodeType":"234","messageId":"235","endLine":221,"endColumn":23},{"ruleId":"223","severity":1,"message":"236","line":223,"column":50,"nodeType":"225","messageId":"237","endLine":223,"endColumn":58},{"ruleId":"223","severity":1,"message":"224","line":228,"column":39,"nodeType":"227","messageId":"228","endLine":228,"endColumn":46},{"ruleId":"232","severity":1,"message":"233","line":242,"column":17,"nodeType":"234","messageId":"235","endLine":242,"endColumn":23},{"ruleId":"232","severity":1,"message":"233","line":332,"column":17,"nodeType":"234","messageId":"235","endLine":332,"endColumn":23},{"ruleId":"200","severity":1,"message":"238","line":374,"column":55,"nodeType":"202","messageId":"203","endLine":374,"endColumn":103,"fix":"239"},{"ruleId":"200","severity":1,"message":"238","line":381,"column":55,"nodeType":"202","messageId":"203","endLine":381,"endColumn":103,"fix":"240"},{"ruleId":"200","severity":1,"message":"238","line":388,"column":55,"nodeType":"202","messageId":"203","endLine":388,"endColumn":105,"fix":"241"},{"ruleId":"211","severity":1,"message":"242","line":26,"column":8,"nodeType":"213","endLine":26,"endColumn":27,"suggestions":"243"},{"ruleId":"211","severity":1,"message":"244","line":96,"column":8,"nodeType":"213","endLine":96,"endColumn":10,"suggestions":"245"},{"ruleId":"211","severity":1,"message":"246","line":109,"column":8,"nodeType":"213","endLine":109,"endColumn":23,"suggestions":"247"},{"ruleId":"223","severity":1,"message":"224","line":212,"column":42,"nodeType":"227","messageId":"228","endLine":212,"endColumn":49},{"ruleId":"223","severity":1,"message":"224","line":215,"column":49,"nodeType":"227","messageId":"228","endLine":215,"endColumn":56},{"ruleId":"211","severity":1,"message":"248","line":50,"column":8,"nodeType":"213","endLine":50,"endColumn":27,"suggestions":"249"},{"ruleId":"211","severity":1,"message":"246","line":56,"column":8,"nodeType":"213","endLine":56,"endColumn":31,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":16,"column":13,"nodeType":"253","endLine":16,"endColumn":87},{"ruleId":"251","severity":1,"message":"252","line":18,"column":13,"nodeType":"253","endLine":18,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":23,"column":13,"nodeType":"253","endLine":23,"endColumn":184},{"ruleId":"251","severity":1,"message":"252","line":9,"column":13,"nodeType":"253","endLine":9,"endColumn":64},{"ruleId":"200","severity":1,"message":"254","line":63,"column":45,"nodeType":"202","messageId":"203","endLine":63,"endColumn":108,"fix":"255"},{"ruleId":"200","severity":1,"message":"256","line":64,"column":38,"nodeType":"202","messageId":"203","endLine":64,"endColumn":62,"fix":"257"},{"ruleId":"200","severity":1,"message":"258","line":64,"column":68,"nodeType":"202","messageId":"203","endLine":64,"endColumn":96,"fix":"259"},{"ruleId":"200","severity":1,"message":"260","line":99,"column":41,"nodeType":"202","messageId":"203","endLine":99,"endColumn":67,"fix":"261"},{"ruleId":"200","severity":1,"message":"262","line":99,"column":73,"nodeType":"202","messageId":"203","endLine":99,"endColumn":103,"fix":"263"},{"ruleId":"211","severity":1,"message":"264","line":52,"column":8,"nodeType":"213","endLine":52,"endColumn":10,"suggestions":"265"},{"ruleId":"211","severity":1,"message":"266","line":58,"column":8,"nodeType":"213","endLine":58,"endColumn":23,"suggestions":"267"},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"no-useless-computed-key","Unnecessarily computed property [\"darkLoader\"] found.","Property","unnecessarilyComputedProperty",{"range":"270","text":"271"},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["272","273"],["274","275"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'duration' and 'handleClose'. Either include them or remove the dependency array. If 'handleClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["276"],"Unnecessarily computed property [\"darkActionBtnContainer\"] found.",{"range":"277","text":"278"},"Unnecessarily computed property [\"darkActionBtnText\"] found.",{"range":"279","text":"280"},"React Hook useEffect has a missing dependency: 'btnClicked'. Either include it or remove the dependency array.",["281"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["282"],"array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","ReturnStatement","expectedReturnValue","Unnecessarily computed property [\"unSeenMsgUser\"] found.",{"range":"283","text":"284"},{"range":"285","text":"284"},"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","Array.prototype.map() expects a value to be returned at the end of function.","expectedAtEnd","Unnecessarily computed property [\"selectedBottomTabIcon\"] found.",{"range":"286","text":"287"},{"range":"288","text":"287"},{"range":"289","text":"287"},"React Hook useEffect has missing dependencies: 'chatRoomId' and 'dispatch'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["290"],"React Hook useEffect has missing dependencies: 'chatRoomId', 'dispatch', and 'userTokenOfSecondUser'. Either include them or remove the dependency array.",["291"],"React Hook useEffect has a missing dependency: 'chatRoomId'. Either include it or remove the dependency array.",["292"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUserDetails'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["293"],["294"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Unnecessarily computed property [\"myMessageAlignment\"] found.",{"range":"295","text":"296"},"Unnecessarily computed property [\"myMessage\"] found.",{"range":"297","text":"298"},"Unnecessarily computed property [\"theirMessage\"] found.",{"range":"299","text":"300"},"Unnecessarily computed property [\"myReplyIcon\"] found.",{"range":"301","text":"302"},"Unnecessarily computed property [\"theirReplyIcon\"] found.",{"range":"303","text":"304"},"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["305"],"React Hook useEffect has missing dependencies: 'snackBarMsg' and 'snackBarType'. Either include them or remove the dependency array.",["306"],"no-global-assign","no-unsafe-negation",[372,386],"\"darkLoader\"",{"messageId":"307","fix":"308","desc":"309"},{"messageId":"310","fix":"311","desc":"312"},{"messageId":"307","fix":"313","desc":"309"},{"messageId":"310","fix":"314","desc":"312"},{"desc":"315","fix":"316"},[365,391],"\"darkActionBtnContainer\"",[782,803],"\"darkActionBtnText\"",{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},[6988,7005],"\"unSeenMsgUser\"",[7877,7894],[15340,15365],"\"selectedBottomTabIcon\"",[15625,15650],[15914,15939],{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},[1782,1804],"\"myMessageAlignment\"",[1888,1901],"\"myMessage\"",[1918,1934],"\"theirMessage\"",[3709,3724],"\"myReplyIcon\"",[3741,3759],"\"theirReplyIcon\"",{"desc":"319","fix":"331"},{"desc":"332","fix":"333"},"removeEscape",{"range":"334","text":"335"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"336","text":"337"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"338","text":"335"},{"range":"339","text":"337"},"Update the dependencies array to be: [duration, handleClose, msg]",{"range":"340","text":"341"},"Update the dependencies array to be: [btnClicked, isUserRegistered]",{"range":"342","text":"343"},"Update the dependencies array to be: [dispatch]",{"range":"344","text":"345"},"Update the dependencies array to be: [chatRoomId, dispatch, isSomeoneLoggedIn]",{"range":"346","text":"347"},"Update the dependencies array to be: [chatRoomId, dispatch, userTokenOfSecondUser]",{"range":"348","text":"349"},"Update the dependencies array to be: [chatRoomId, isANewMessage]",{"range":"350","text":"351"},"Update the dependencies array to be: [dispatch, isSomeoneLoggedIn, selectedUserDetails]",{"range":"352","text":"353"},"Update the dependencies array to be: [chatRoomId, isANewChatRoomStarted]",{"range":"354","text":"355"},{"range":"356","text":"345"},"Update the dependencies array to be: [snackBarCount, snackBarMsg, snackBarType]",{"range":"357","text":"358"},[1942,1943],"",[1942,1942],"\\",[1967,1968],[1967,1967],[388,393],"[duration, handleClose, msg]",[1166,1184],"[btnClicked, isUserRegistered]",[2145,2147],"[dispatch]",[682,701],"[chatRoomId, dispatch, isSomeoneLoggedIn]",[3648,3650],"[chatRoomId, dispatch, userTokenOfSecondUser]",[4156,4171],"[chatRoomId, isANewMessage]",[1678,1697],"[dispatch, isSomeoneLoggedIn, selectedUserDetails]",[1828,1851],"[chatRoomId, isANewChatRoomStarted]",[1394,1396],[1519,1534],"[snackBarCount, snackBarMsg, snackBarType]"]